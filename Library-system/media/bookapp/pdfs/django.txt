											CHAPTER-1
											==========
						Introduction to Web development and Django
						--------------------------------------------------------------------

Web Application:
-------------------------
-->The application which will provide services over the web are called as web applications.
Ex:
	gmail,facebook............
-->Every web application contains 2-components.
1).Front End
2).Back End

1).Front End:
---------------------
	-->It represents what end user is seeing on the website.
	-->We can develop front-end component by using HTML,CSS,JS,jquery & bootstrap.
	-->Jquery and bootstrap are advanced front-end technologies, which are developed using HTML,CSS and JS only.

HTML:
	-->Hyper Text Markup Language
	-->Every web application should contain html. i.e HTML is the mandatory technology for web development. It represent structure of web page.

CSS:Cascade Style Sheets
	-->It is an optional technology, still web application contains CSS.
	-->The main objective of CSS is to add styles to the HTML pages like colors,fonts,borders etc....

Java Script:
	-->It allows to add interactivity to the web application including programming logic.
	-->The main objective of java script is to add functionality to the HTML pages. i.e to add dynamic nature to the HTML pages.
	HTML-->Meant for static response
	HTML + JS-->Meant for dynamic response

Ex-1:
	To display "Welcome To Django Classes" response to the end user only HTML is enough, b'z it is a static response.

Ex-2:
	To display current server date and time to the end user, only HTML is not enough we required to use some extra technology like JS, JSP, ASP, PHP etc as it is dynamic response.

Static Response Vs Dynamic Response:
----------------------------------------------------------
-->If the response is not varied from time to time and person to person then it is considered as static response.
Ex:
		Login page Gmail
		Login page of HMS

-->If the response is varied from time to time and person to person then it is considered as dynamic response.
Ex:
		Inbox page of gmail
		Balance page of HDFC Bank 

2).Back End:
-------------------
-->It is the technology used to decide what to show to the end user on the Front-End.
-->i.e back end is responsible to generate required response to the end user, which is displayed by the Front-End.
-->Back-End have 3-components.
			1).The language like java,python etc....
			2).The framework like Django, Flask, Pyramid etc....
			3).The Database like SQLite,Oracle,MySQL etc.....
-->For the Backend language python is the best choice b'z of the reasons are:
	Simple and easy to learn, libraries, concise code.
-->For the framework Django is the best choice b'z it is fast, secure and scalable. Django is the most popular web application framework for python.
-->Django provides inbuilt database which is nothing but SQLite, which is the best choice for database.

Django:
-----------
-->Django is a web application framework.
-->Django is used to develop web applications.
-->Django is completely written in python programming language.
-->It is a high level, opensource python based web framework.
-->DRY(Don't Repeat Yourself).
-->It provides RAD(Rapid Application Development) facilities.
-->It is based on MVT(Model View Template) design pattern.
									Diagram

-->Django was created in 2003 as an project at Lowrence journal-world news paper for their web development.
-->The original authors of Django framework are:Adrian Holovaty, Simon Willison.
-->After testing this framework with heavy traffics, developers released for the public as opensource framework on july 21st 2005.
-->The django was named in the memory of Guitarist Django Reinhardt.
-->Official website:https://www.djangoproject.com/

Top 5 Features of Django Framework:
--------------------------------------------------------
	Django was invented to meet fast-moving newsroom headlines, while satisfying the tough requirements of experienced web developers.

1).Fast:
	Django was designed to help developers take applications from concept to completion of quickly as possible.

2).Fully Loaded:
	Django includes dozens of extras we can use to handle common web development tasks. Django takes care of user authentication, content administration,site maps,RSS feeds and many tasks.

3).Security:
	Django takes security seriously and helps developers avoid many common security mistakes, such as SQL injection, cross-site scripting, cross-site request forgery and clickjaking. Its user authentication system provides a secure way to manage user accounts and passwords.

4).Scalability:
	Some of the busiest sites on the planet use Djangos ability to quickly and flexibly scale to meet the heaviest traffic demands.

5).Versatile:
	Companies, organizations and governments have used Django to build all sorts of things — from content management systems to social networks to scientific computing platforms.

											CHAPTER-2
											===========
			Django & Atom Installation and Development of First Web Application
			---------------------------------------------------------------------------------------------------------

How to install Django:
====================
-->Make sure python is already installed in our system.
C:\Users\mahesh>py --version
Python 3.10.5

-->Install django by using pip
C:\Users\mahesh>pip install django==4.1

-->To check the django version:
C:\Users\mahesh>py -m django --version

Atom IDE
--------------
-->Install Atom IDE from https://atom.io/

Speciality of Atom:
----------------------------
-->It is a freeware.
-->It is an opensource.
-->It supports cross platforms.
-->It provides several auto completition short-cuts for easy development.

How to configure Atom for Python:
-----------------------------------------------------
1).Terminal Installation:
	File-->Settings-->Install-->In the search box type terminal--> platformio-ide-terminal-->Click on install.

2).Python Autocompletion:
	File-->Settings-->Install-->In the search box type python-->autocomplete-python -->Click on Install.

3).Django:
	File-->Settings-->Install-->In the search box type django-->atom-django-->Install.

Django Project Vs Django Application:
--------------------------------------------------------
-->A Django project is a collection of applications and configurations which forms a full web application.
Ex:
		Banking Project.

-->A Django application is responsible to perform a particular task in our entire web application.
Ex:
		loan app
		registration app
		polling app

Project=Several Applications + Configuration information

Note:
	-->The django applications can be plugged into other projects. i.e these are re-usable.(Pluggable Django Applications).
	-->Without existing Django project there is no chance of existing Django application. Before creating any application first we have to create project.

How to create Django project:
--------------------------------------------
-->Once we create django project on our system, we will get django-admin command line tool, which can be used to create our django project.

D:\>mkdir Django_10AM_Projects

D:\>cd Django_10AM_Projects

D:\Django_10AM_Projects>django-admin startproject firstproject
							(or)
D:\Django_10AM_Projects>py -m django startproject firstproject

D:\Django_10AM_Projects>tree /f

1).__init__.py:
	It is a blank python script. Because of this special name, Django treated this folder as python package.

2).settings.py:
	In this file we have to specify all our project settings and configurations like installed apps, middleware configuration, database configurations etc....

3).urls.py:
	Here we have to store all our url-patterns of our project.
	For every view(web page), we have to define separate url-pattern. End user can use url-patterns to access our web pages.

4).wsgi.py:
	wsgi-->Web Server Gateway Interface.
	We can use this file while developing our application in production on online server.

5).manage.py:
	The most commonly used python script is manage.py
	It is a commandline utility to interact with django project in various ways like to run development server, run tests, create migrations etc....

How to run Django development server:
-----------------------------------------------------------
-->We have to move to the manage.py file location and we have to execute.
	D:\DjangoProjects\firstproject>py manage.py runserver
-->Now server will be started.

How to send first request:
---------------------------------------
-->Open one browser and send request.
			http://127.0.0.1:8000

Roles of Web Server:
------------------------------
-->Web server will provide environment to run our web application.
-->Web server is responsible to receive the request and forward request to the corresponding web component based on url-pattern and to provide response to the end user.
-->Django framework is responsible to provide development server. Even Django framework provides on inbuilt database sqlite.
Note:
		Once we started server a special data base related files will be generated in our project folder structure.

Creation of First Web Application:
---------------------------------------------------
-->Once we create Django project, we can create any number of applications in that project.

-->To create an application.
			D:\DjangoProjects\firstproject>py manage.py startapp firstapp

-->The following folder structure got created under firstapp

1).__init__.py:
	It is a blank python script. Because of this special name, Django treated this folder as python package.

2).admin.py:
	We can register our models in this file. Django will use these models with Django's admin interface.

3).apps.py:
	In this file we have to specify application's specifi configurations.

4).models.py:
	In this file we have to store application's data models.

5).tests.py:
	In this file we have to specify test functions to test our code.

6).views.py:
	In this file we have to save functions that handles requests and return required responses.

7).Migrations Folder:
	This directory stores database specific information related to models.

Note:
	The most important commonly used files in every project are views.py and models.py.

Activities required for application:
---------------------------------------------------
Activity-1:Add our application in settings.py, so that Django aware about our application.

In settings.py
--------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp',
]

Activity-2:
	Create a view function for our application in views.py
	View is responsible to prepare required response to the end user. i.e view conains business logic.
	There are 2-types views
			1).Function Based Views
			2).Class Based Views
-->In this application we are using function based views.

views.py:
--------------
from django.shortcuts import render
from django.http import HttpResponse
def display(request):
    s='<h1>Hello Students Welcome To Mahesh Sir Django Classes</h1>'
    return HttpResponse(s)

Note:
	1).Each view will be specified as one function in views.py
	2).In the above example display is the name of the function which is nothing but one view.
	3).Each view should take atleast one argument(request)
	4).Each view should return HttpResponse object with required response.
	
-->View can accept request as input and perform required operations and provide proper response to the end user.

Activiti-3:
	Define url-pattern for our view in urls.py file
	This url-pattern will be used by end-user to send request for our view.
	The 'urlpatterns' list routes URL's to views.

urls.py:
------------
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('greet/', views.display),
]

-->Whenever end user sending the request with urlpattern:greet then display() function will be executed and provide required response.

Activity-4:
	Start server and send the request.
	py manage.py runserver.
	http://127.0.0.1:8000/greet/

Http Request flow in Django Application:
-------------------------------------------------------------
-->Whenever end user sending the request first Django development server will get that request.
-->From the request  Django will identify urlpatterns and by using urls.py, the corresponding view will be identified.
-->The request will be forwarded to the view. The corresponding function will be executed and provide required response to the end user.

Q.Write Django application to send request to display server time as response.
---------------------------------------------------------------------------------------------------------------------
Step-01:Create a new project with the name of SecondProject.
		D:\DjangoProjects>django-admin startproject SecondProject

Step-02:Create an application in SecondProject
		D:\DjangoProjects\SecondProject>py manage.py startapp firstApp
			
Step03:Add firstApp in settings.py.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstApp',
]

Step-04:Define a function in views.py
def timeinfo(request):
    date=datetime.datetime.now()
    msg='<h1>Hello Friend Good Evening!!!!</h1><hr>'
    msg=msg+'<h2>Now server time is:'+str(date)+'</h2>'
    return HttpResponse(msg) 

Step-05:Define url-pattern in urls.py
from firstApp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('time/', views.timeinfo),
]

Step-06:Start server send the request.
	http://127.0.0.1:8000/time/

Q.Single Application with multiple views.
-------------------------------------------------------------
Step-01:Create a new project with the name of SecondProject.
		D:\DjangoProjects>django-admin startproject maheshjobsProject

Step-02:Create an application in maheshjobsProject
		D:\DjangoProjects\maheshjobsProject>py manage.py startapp jobs
			
Step-03:Add jobs in settings.py.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jobs',
]
Step-04:Declare multiple functions in views.py
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def hydjobsinfo(request):
    s='<h1>Hyderabad Jobs Information</h1>'
    return HttpResponse(s)
def punejobsinfo(request):
    s='<h1>Pune Jobs Information</h1>'
    return HttpResponse(s)
def bngjobsinfo(request):
    s='<h1>Bng Jobs Information</h1>'
    return HttpResponse(s)
def biharjobsinfo(request):
    s='<h1>Bihar Jobs Information</h1>'
    return HttpResponse(s)

Step-05:Define url-pattern in urls.py
from jobs import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('hyd/', views.hydjobsinfo),
    path('pune/', views.punejobsinfo),
    path('bng/', views.bngjobsinfo),
    path('bihar/', views.biharjobsinfo),
]

Step-06:Strat server send request.
			http://127.0.0.1:8000/hyd/
			http://127.0.0.1:8000/pune/
			http://127.0.0.1:8000/bng/
			http://127.0.0.1:8000/bihar/

Q.Based on time good mng, good aft, good evening & good night.
------------------------------------------------------------------------------------------------
Step-01:Create a new project with the name of datetimeProject.
			D:\DjangoProjects>django-admin startproject datetimeProject

Step-02:Create an application in datettimeProject
			D:\DjangoProjects\datetimeProject>py manage.py startapp testApp

Step-03:Configure testApp in settings.py

Step-04:Define a function in views.py
def datetimeinfo(request):
    date=datetime.datetime.now()
    h=int(date.strftime("%H"))
    msg='<h1>Hello guest very '
    if h<12:
        msg=msg+'Good Morning'
    elif h<16:
        msg=msg+'Good Afternoon'
    elif h<21:
        msg=msg+'Good Evening'
    else:
        msg=msg+'Good Night'
    msg=msg+'</h1><hr>'
    msg=msg+'<h1>Now the server time is:'+str(date)+'</h1>'
    return HttpResponse(msg)

Step-05:Step-05:Define url-pattern in urls.py
from testApp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('time/', views.datetimeinfo),
]

Step-06:Start server and send request.
				http://127.0.0.1:8000/time/

Q.Single project with multiple applications.
-----------------------------------------------------------------
firstApp views.py:
--------------------------
def wish1(request):
    return HttpResponse('<h1>Hello This Is From First Application</h1>')

secondApp views.py:
-------------------------------
def wish2(request):
    return HttpResponse('<h1>Hello This Is From Second Application</h1>')

urls.py:
------------
First Approach:
-----------------------
from firstApp import views as v1
from secondApp import views as v2
urlpatterns = [
    path('admin/', admin.site.urls),
    path('wish1/', v1.wish1),
    path('wish2/', v2.wish2),
]

Second Approach:
--------------------------
from firstApp.views import wish1
from secondApp.views import wish2
urlpatterns = [
    path('admin/', admin.site.urls),
    path('wish1/', wish1),
    path('wish2/', wish2),
]

-->Start server send request.
		http://127.0.0.1:8000/wish1/
		http://127.0.0.1:8000/wish2/

Defining URL Patterns at Application Level instead of Project Level:
===========================================================
-->A Django project can contains multiple applications and each application contains multiple views. Defining url-pattern for all views of all applications inside urls.py file of project creates maintenance problem and reduce re-usability of applications.
-->We can solve this problem by defining url-pattern at application level instead of project level. For every application we have to create a separate urls.py file and we have to define all that application specific urls in that file. We have to link this application level urls.py file to project level urls.py file by using include() function.

Ex:
----
Step-01:Create project
	D:\Django_17Mar_11AM>django-admin startproject baseproject

Step-02:Create Application
	D:\Django_17Mar_11AM\baseproject>py manage.py startapp testapp

Step-03:Add app to settings.py

Step-04:Define views.py
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def first_view(request):
    return HttpResponse('<h1>First View Response</h1>')
def second_view(request):
    return HttpResponse('<h1>Second View Response</h1>')
def third_view(request):
    return HttpResponse('<h1>Third View Response</h1>')
def fourth_view(request):
    return HttpResponse('<h1>Fourth View Response</h1>')
def fifth_view(request):
    return HttpResponse('<h1>Fifth View Response</h1>')

Step-05:Create a separate file urls.py file inside application.

from django.urls import path
from . import views
urlpatterns = [
    path('first/', views.first_view),
    path('second/', views.second_view),
    path('third/', views.third_view),
    path('fourth/', views.fourth_view),
    path('fifth/', views.fifth_view),
]

Step-06:Include this application level urls.py inside project level url.py file.

project level urls.py
------------------------------
from django.urls import path,include
urlpatterns = [
    path('admin/', admin.site.urls),
    path('testapp/', include('testapp.urls')),
]

Step-07:Start server send request.
		py manage.py runserver

Step-08:Send request.		
		http://127.0.0.1:8000/testapp/first/
		http://127.0.0.1:8000/testapp/second/
Note:
	We can see re-usability of application in other projects just with only 2-lines addition.
		1).settings.py-->add application name
		2).urls.py-->just add:path('urlsapp/', include('urlsApp.urls'))

Advantages:
	The main advantages of defining url-pattern at application level instead of project level are:
		1).It promotes re-usability of django applications across multiple projects.
		2).Project level urls.py will be clean and more readable.

Ex:
----
D:\Django_17Mar_11AM>django-admin startproject applevelurlsproject

D:\Django_17Mar_11AM>cd applevelurlsproject

D:\Django_17Mar_11AM\applevelurlsproject>py manage.py startapp testapp

views.py
------------
from django.http import HttpResponse

# Create your views here.
def exams_view(request):
    return HttpResponse('<h1>Exams View</h1>')
def attendance_view(request):
    return HttpResponse('<h1>Attendance View</h1>')
def fees_view(request):
    return HttpResponse('<h1>Fees View</h1>')

urls.py-->application level
--------------------------------------
from django.urls import path
from . import views
urlpatterns = [
    path('exams/', views.exams_view),
    path('attendance/', views.attendance_view),
    path('fees/', views.fees_view),
]

Create another project:
-----------------------------------
D:\Django_17Mar_11AM>django-admin startproject maheshproject

-->Copy testapp from applevelurlsproject and paste it in current project, then include app level urls in project level urls.


												Chapter-3
												=========
											Django Templates
														&
												Static Files

Django Templates:
----------------------------
-->It is not recommended to write html code inside python script(views.py file) because.
	1).It reduces readability because python code mixed with HTML code.
	2).No separation of roles. Python developers has to concentrate on both python code and HTML code.
	3).It doesnot promote re-usability of code.
-->We can overcome these problems by separating HTML code into a separate html file. This html file is nothing but template.
-->From python file(views.py) we can use these templates based on our requirement.
-->We have to write templates at project level only, we can use these templates in multiple applications.

Python stuff:
===========
pathlib-->module name
Path-->class name

pathlib module provides various classes representing file system paths based on different operating system.

from pathlib import Path
print(__file__)#It returns the name of the file:test.py
fpath=Path(__file__)
print(type(fpath))#<class 'pathlib.WindowsPath'>
complete_path=fpath.resolve()
print(complete_path)#D:\Mahesh_Classes\test.py
print(Path(__file__).resolve().parent)#D:\Mahesh_Classes
print(Path(__file__).resolve().parent.parent)#D:\

Note:
	The main advantage of this approach is we are not required to hard code system specific paths(locations) in python script.

View meant for business logic
Template meant for presentation logic / frontend

MVC design pattern/architecture:
--------------------------------------------------
M-->Model (Business logic)
V-->View (Presentation Logic)
C-->Controller(Co-ordination)

MVT design pattern/architecture:
--------------------------------------------------
M-->Model
V-->View(Business logic-->Python files)
T-->Template(Presentation Layer)

Steps to develop Template Based Application:
========================================
Step-01:Create a project.
		D:\DjangoProjects>django-admin startproject templatesProject

Step-02:Create application.
		D:\DjangoProjects\templatesProject>py manage.py startapp testApp

Step-03:Add this application to the settings.py file, so that django aware of application.
		
Step-04:
	Create a 'templates' folder inside main project folder.
	In that templates folder create a sepaerate folder named with testApp to hold that particular application specific temlates.

Step-05:Add templates folder to settings.py file so that django can aware of our templates.

	TEMPLATES=[

		'DIRS':[D:\DjangoProjects\templatesProject\templates,]
	]
-->It is not recommended to hard code system specific location in settings.py file. To overcome this problem, we can generate templates directory path programmatically as.
			BASE_DIR = Path(__file__).resolve().parent.parent
			TEMPLATE_DIR = BASE_DIR/'templates'

-->Specify this TEMPLATE_DIR inside settings.py.
		'DIRS': [TEMPLATE_DIR,],

Step-06:
	Create html file inside templatesProject/templates/testApp folder. This html file is nothing but template.

wish.html:
----------------
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <style media="screen">
      h1{
        color:red;
      }
      h2{
        color:blue;
      }
    </style>
  </head>
  <body>
    <h1>Welcome To Django Templates Demo</h1>
    <h2>Second hero of django in MVT:Templates</h2>
  </body>
</html>

Step-07: Define function based view inside views.py file

from django.shortcuts import render
def wish(request):
    return render(request,'testApp/wish.html')

Step-08:Define url-pattern in project level or application level.
	from testApp import views
	urlpatterns = [
		path('admin/', admin.site.urls),
		path('test/', views.wish),
	]

Step-09:Strat server and send request.
	http://127.0.0.1:8000/test/

Template Tags:
-----------------------
-->From python views.py we can inject dynamic content to the template file by using template tags.
-->Template tags also known as Template variables.
-->Take special care about template tag syntax it is not python syntax and not HTML syntax it is a Django syntax.

Template tag syntax for inserting text data:{{insert_date}}
--------------------------------------------------------------------------------------
-->This template tag we have to place inside template file(i.e html file) and we have to provide insert_date value form the python views.py file.

Application to send date and time from views.py to template file:
--------------------------------------------------------------------------------------------------
wish.html
----------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <style media="screen">
      h1{
        color:red;
      }
      h2{
        color:blue;
      }
    </style>
  </head>
  <body>
    <h1>Welcome To Django Templates Demo</h1>
    <h2>Now server the time is:{{insert_date}}</h2>
  </body>
</html>

views.py
------------
import datetime
def wish(request):
    date=datetime.datetime.now()
    my_dict={'insert_date':date}
    return render(request,'testApp/wish.html',context=my_dict)
Note:
	The values to the template variables should be passed from the view in the form of dictionary as argument to context.
	
To display date, time and student info:
------------------------------------------------------------
views.py
------------
import datetime
# Create your views here.
def wish(request):
    date=datetime.datetime.now()
    name="sunny"
    marks=100
    rollno=101
    my_dict={'insert_date':date,'insert_name':name,'rollno':rollno,'marks':marks,}
    return render(request,'testApp/wish.html',context=my_dict)

wish.html
----------------
<body>
    <h1>Welcome To Django Templates Demo</h1>
    <h2>Hello guest now server the time is:{{insert_date}}
    <ol>
      <li>Name:{{insert_name}}</li>
      <li>Marks:{{marks}}</li>
      <li>Roll No:{{rollno}}</li>
    </ol>
    </h2>
  </body>

Application to wish end user based on time:
-----------------------------------------------------------------
wish.html
---------------
<body>
    <h1>{{insert_msg}}</h1>
    <h2>Hello guest now server the time is:{{insert_date}}</h2>
  </body>

views.py
------------
import datetime
def wish(request):
    date=datetime.datetime.now()
    msg="Hello guest very very good "
    h=int(date.strftime('%H'))
    if h<=12:
        msg+='Morning'
    elif h<16:
        msg+='Afternoon'
    elif h<21:
        msg+='Evening'
    else:
        msg+='Night'
    my_dict={'insert_date':date,'insert_msg':msg}
    return render(request,'testApp/wish.html',context=my_dict)

Application:
------------------
End User:
	Hello Friend , The current server time  is:date and time
	Course Information:
		Name:Django
		Prerequisite:Python
		Current Batch Students are:

Steps to create project:
-----------------------------------
D:\Django_17Mar_11AM>django-admin startproject templateproject2

D:\Django_17Mar_11AM>cd templateproject2

D:\Django_17Mar_11AM\templateproject2>py manage.py startapp testapp

-->Add app in settings.py

-->Create templates folder in main project folder. Add TEMPLATE_DIR in settings.py

results.html
-------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Result Page</title>
    <style >
      body{
        background:yellow;
        color:red;
      }
    </style>
  </head>
  <body>
    <h1>Hello Friend, The Server Time Is:{{time}}</h1>
    <h2>Course Name:{{name}}</h2>
    <h2>Prerequisite:{{prerequisite}}</h2>
    <ul>
      <li>Good to get job very easily</li>
      <li>Learning is also very easy</li>
      <li>You can claim 3 to 4 years of exp</li>
      <li>It is very very helful for freshers.....</li>
    </ul>
    <table border="2">
      <thead>
        <th>S.No</th>
        <th>Name</th>
        <th>Feedback</th>
      </thead>
      <tr>
        <td>101</td>
        <td>Sunny</td>
        <td>Good</td>
      </tr>
      <tr>
        <td>102</td>
        <td>Bunny</td>
        <td>Good</td>
      </tr>
      <tr>
        <td>103</td>
        <td>Vinny</td>
        <td>Good</td>
      </tr>

    </table>
  </body>
</html>

views.py
-------------
from django.shortcuts import render
import datetime
# Create your views here.
def info_view(request):
    time = datetime.datetime.now()
    name = 'Django'
    prerequisite = 'Python'
    my_dict = {'time':time,'name':name,'prerequisite':prerequisite}
    return render(request,'testapp/results.html',my_dict)

urls.py
---------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('info/', views.info_view),
]

-->Start server send request.
	http://127.0.0.1:8000/info/

========================================================================
Astrology Project:
---------------------------
Hello Friend, Good Morning
Now the server time is:
Atrrology:XXXXXXX

Creation of project:
-----------------------------
D:\Django_17Mar_11AM>django-admin startproject astrologyproject

D:\Django_17Mar_11AM>cd astrologyproject

D:\Django_17Mar_11AM\astrologyproject>py manage.py startapp testapp

-->Add app in settings.py

-->Create "templates" and add in settings.py

astrology.html
----------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Astrology Home Page</title>
    <style >
      body{
        background:yellow;
        color:red;
      }
      span{
        color:blue;
      }
    </style>
  </head>
  <body>
    <h1>Hello Friend, <span>{{wish}}</span></h1>
    <h2>Now The Server Time Is: <span>{{time}}</span></h2>
    <h1>Astrology Info For P.Haji Vali <span>{{msg}}</span></h1>
    <h2>Very soon, you are going to get marriage with: <span>{{name}}</span></h2>
  </body>
</html>

views.py
-------------
from django.shortcuts import render
import datetime
import random
# Create your views here.
def result_view(request):
    msg_list = [
    'The golden days ahead',
    'Better to sleep more time even in office',
    'Tomorrow will be the best day of your life',
    'Tomorrow is the perfect day to propose ur GF',
    'Very soon you will get job'
    ]
    names_list = ['Sunny','Mallika','Katrina','Kareena','Deepika','Samantha']
    time = datetime.datetime.now()
    h = int(time.strftime('%H'))
    if h<12:
        s = 'Good Morning'
    elif h<16:
        s = 'Good Afternoon'
    elif h<21:
        s = 'Good Evevning'
    else:
        s = 'Good Night'
    name = random.choice(names_list)
    msg = random.choice(msg_list)
    my_dict = {'time':time,'name':name,'msg':msg,'wish':s}
    return render(request,'testapp/astrology.html',my_dict)

urls.py
---------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('astr/', views.result_view),
]

-->start server and send request
	http://127.0.0.1:8000/astr/

=======================================================================
											HTML Basics:
											============
-->HTML stands for HyperText Markup Language
-->HTML is a web technology which is used to develop web applications. Without using HTML we cannot build web applications. It is the mandatory technology.

Structure of HTML page:
-----------------------------------
Every HTML page contains 2-parts.
1).Head
2).Body

-->Head contains meta data like title of the page, keywords, CSS file and Java script files information we have to specify in head part only.

-->Body contains actual content.

<!DOCTYPE html>//To indicates that it is HTML page
<html>
  <head>
    meta data like keywords, author,title...
    css files information
	js files information
  </head>
  <body>
    Actual Data
  </body>
</html>

Ex:test.html
--------------------
<!doctype html>
<html lang="en">
 <head>
  <meta charset="UTF-8">
  <meta name="Generator" content="EditPlus®">
  <meta name="Author" content="">
  <meta name="Keywords" content="">
  <meta name="Description" content="">
  <title>Django Session Demo</title>
 </head>
 <body>
 <!--This page is just for demo purpose -->
  <h1>Welcome To NareshIT Django Classes</h1>
 </body>
</html>

HTML Comments:
---------------------------
# This if python comment
// This is java single line comment
<!-- Thisis html comment -->

<title> tag:
----------------
<body>
	<title>Basic HTML for Django Classes</title>
</body>

Heading Tags:
--------------------
	HTML supports 6-heading tags.
	<h1>Heading-1</h1>
	<h2>Heading-2</h2>
	<h3>Heading-3</h3>
	<h4>Heading-4</h4>
	<h5>Heading-5</h5>
	<h6>Heading-6</h6>

paragraph tag <p>:
	We can use this tag to represent paragraph of text.
	<p>This is first paragraph</p>

Case-1:
	<p>This is First Line
		  This is Second Line
		  This is Third Line
	</p>
-->Total data will come in a single line because we are using only on <p> tag.

Case-2:
	<p>This is First Line</p>
	<p>This is Second Line</p>
	<p>This is Third Line</p>
-->Output will come in multiple lines.	

Case-3:
-----------
<p>This is First Line</p><p>This is Second Line</p><p>This is Third Line</p><p>
Thisis fourth line</p>

Note:
	In HTML indentation is not important but tags are important.
	Blocking is also takes care by html tags only.

Bold and italic tags:
------------------------------
	<b> for bold
	<i> for italic
-->These are old(legacy) html tags and not recommended to use.
Ex:
	<p><b><i>This is first Line</i></b></p>

Advanced Tags:
	<strong> for strong text(bold)
	<em> for emphasis (italic) 
Ex:
	<p><strong><em>This is first line</em></strong></p>

HTML Lists:
------------------
-->There are 2-types of lists.
		1).Ordered list(ol)
				The available courses:
					1.Python
					2.Django
					3.DataScience
		2).Unordered list(ul)
				The available courses:
					. Python
					. Django
					. DataScience

1).Ordered list:
	All list items will be displayed with numbers.
	<h1>The avaibale items:</h1>
<ol>
	<li>Chicken</li>
	<li>Mutton</li>
	<li>Fish</li>
</ol>

2).Unordered list:
	Insteaded of numbers bullet will comw. Here order is not important.
<ul>
	<li>Chicken</li>
	<li>Mutton</li>
	<li>Fish</li>
</ul>

Nested lists:
	We can take list inside list, which are nothing but nested list.
<ol>
	<li>Chicken</li>
	<li>Mutton</li>
	<ul>
		<li>KF</li>
		<li>RC</li>
	</ul>
<ol>

Attributes:
----------------
-->HTML attributes will provide extra information to HTML page.
-->To insert an image in the html page, src attribute specify location of the image to the <img> tag.

Setting image inside HTML:
-----------------------------------------
<h1>My brand ambassodor is<h1>
<img src="sunny1.jpg" alt="Image will be uploded soon">

-->src means source where we have to specify the image source(complete location). We can take image address from the google also.

-->alt means alternate. If image is missing then broken link image will be displayed. In this case we want to display some meaningful text information then we should go for alt attribute.

Note:
	We have to open the tag and we are not responsible to close the tag, such type of tags are called self closing tags.
Ex:
	<img> tag

How to create hyperlinks:
---------------------------------------
<a href="demo1.html">Click Me</a>
<a href="http://facebook.com">FaceBook</a>

Bar & Rest app:
-------------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Mahesh Bar & Reataurant</title>
  </head>
  <body>
    <h1>Welcome To Mahesh Bar & Restaurant</h1>
    <img src="mbar.jpg" alt="Upload image soon">
    <p>We are very specialized for chilled beer.
      We have virtual rain environment with all facilities
      so that 100% guarantee for the kick</p>
      <h2>Our brand ambassodor is:Suuny Leone</h2>
      <img src="sunny.jpg" alt="">
      <h3>Our offered products:</h3>
      <ol>
        <li>KF</li>
        <li>RC</li>
        <li>KNOCKOUT</li>
      </ol>
      <h1>Offer of the day:Buye one get one free</h1>
      <a href="http://youtube.com">YouTube</a>
      <a href="http://facebook.com">FaceBook</a>
  </body>
</html>

Table Creation:
-----------------------
-->We can use
	<table> to create a table
	<thead> to specify head row
	<th> to specify column data in head row(column name)
	<tr> to insert row in the table
	<td> to specify column data in the row/record.

Ex:
		<h1>Naresh IT Employees Data</h1>
	<table border="2">
      <thead>
        <th>ENO</th>
        <th>ENAME</th>
        <th>ESAL</th>
        <th>EADDR</th>
        <tr>
          <td>101</td>
          <td>Sunny</td>
          <td>10000</td>
          <td>Mumbai</td>
        </tr>
      </thead>
    </table>

div and span tag:
-------------------------
-->We can use div and span tags to group related tags into a single unit.
-->In general we can use these tags with css.

-->div means division.

Ex:tset.html
-------------------
<link rel="stylesheet" href='style.css'>
<body>
<h1>UI Technologies are very important in web developemnt<h1>
<h2>UI Technologies are very important in web developemnt<h2>
<h3>UI Technologies are very important in web developemnt<h3>
<h2>UI Technologies are very important in web developemnt<h2>
<h1>UI Technologies are very important in web developemnt<h1>
</body>

style.css
-------------
h1{
color:red;
}

Ex:tset.html
-------------------
<link rel="stylesheet" href='style.css'>
<div>
	<h1>UI Technologies are very important in web developemnt<h1>
	<h2>UI Technologies are very important in web developemnt<h2>
	<h3>UI Technologies are very important in web developemnt<h3>
	<h2>UI Technologies are very important in web developemnt<h2>
	<h1>UI Technologies are very important in web developemnt<h1>
</div>

style.css
-------------
dev{
color:red;
}

<span> tag is exactly same as division tag except that it is inline. i.e to define group within the line of text we can use <span> tag.

Ex:test.html
--------------------
<h1>The 3 important viruses for the human being:<span> Drinking, Gambling and Extra Circular Activities...</span> These are very dangerious than corona also</h1>

style.css
--------------
span{
color:blue;
}

<div> will work for group of lines where as <span> will work within the line.

Note:
	<div> and <span> tags are help ful only for styling html. Hence they will always work with css only.

Creation of HTML Forms:
--------------------------------------
-->As the part of web application development, we have to develop several forms like login form, registration form etc....
-->We can create HTML form by using <form> tag.

Syn:
		<form class="" action="" method="">

-->Within the form we have to collect end user input.
-->To collect end user input, we have to use <input> tag.

Syn:
	<input type="" name="" value=""/>

Ex:
		<h1>Student Registration Form</h1>
	<form  action="thankyou.html">
      Name:<input type='text' name='' value=''>
      <input type="submit" name="" value="Login">
    </form>

-->type attribute can be used to specify the type of input end user has to provide. The different types are:
		text, email, password, color, submit, checkbox, radio etc....

Name:<input type='text' name='' value=''>
Name:<input type='password' name='' value=''>
Name:<input type='email' name='' value=''>
Name:<input type='color' name='' value=''>
Name:<input type='radio' name='' value=''>
Name:<input type='checkbox' name='' value=''>

-->value attribute represents default value will be displayed in the form.

Ex:
	<input type='text' name='' value='Enter User Name'/>

-->name attribute represents the name of input tag. By using this name, in the next target page we can access end user provided input values.

Ex:
	<form  action="thankyou.html">
      Name:<input type='text' name='username' value='Enter Name'>
      Password:<input type='password' name='pwd' value='Enter Password'>
	  <input type="submit" name="" value="Login">
    </form>

Note:
	To provide default value it is highly recommended to use placeholder attribute because end user is not required to delete default value while entering data.

	Name1:<input type='text' name='name1' value='Enter User Name'/>
	Name2:<input type='text' name='name2' placeholder='Enter User Name'/>

required attribute:
	If end user compulsory should required to provide input values then we should go for 'required' attribute.
Ex:
	<input type='text' name='' placeholder='Enter Name' required>

action attribute:
	Once we fill the form and click submit, then to which page it will go is decided by 'action' attribute. The value of action attribute can be either local resource or web URL.

Ex:
	<form  action="thankyou.html">
	<form  action="http://facebook.com">

Creation of Labels for HTML elements:
----------------------------------------------------------
-->We can define label text for our HTML elements like radio buttons, text boxes etc by using <label> tag.

Syn:
		<label for="">Enter Name</label>

Ex:
	<p>Enter name:</p>
	<input type='text' name='' placeholder='Enter Name' required>

-->Check the results.
-->In this case there is no relation between text box and data.

-->To link data to tyext box, we have to use <label> tag.
		<label for="name">Enter Name:</label>
		<input id="name" type='text' name='uname' placeholder='Enter Name' required>

-->The value of for attibute  should be same as id attribute value.

<form  action="thankyou.html" method="get/post">
-----------------------------------------------------------------------------
get & post:
	In GET method, the data will be appended to the URL and send to the next page. In POST method, the data will be encapsulated inside request body and not visible in the URL.

How to create multiple submit buttons in a page:
-------------------------------------------------------------------------
<form  action="thankyou.html" method="GET">
Name:
      <input type='text' name='username' placeholder='Enter Name' required><br>
      <input type="submit" name="action" value="ADD"><br>
      <input type="submit" name="action" value="REMOVE"><br>
      <input type="submit" name="action" value="UPDATE">
</form>

display url of thankyo.html

action=request.getParameter('action')
if action=='ADD':
	perform add functionality
elif action=='REMOVE':
	perform remove functionality
elif action=="UPDATE":
	perform update functionality

Implementing Radio Buttons:
--------------------------------------------
<h3>Are You Married</h3>
<label for="yes">Yes</label>
<input id="yes" type='radio' name="married"><br>
<label for="no">No</label>
<input id="no" type='radio' name="married"><br>

-->Several options are available but we have to select only one option:Radio Button

<h1>Q.This is sample Question?</h1>
	<input type='radio' name='q1' value='a'>A<br>
	<input type='radio' name='q1' value='b'>B<br>
	<input type='radio' name='q1' value='c'>C<br>
	<input type='radio' name='q1' value='d'>D<br>

Implementing Checkbox:
-------------------------------------
	<h1>Q.This is sample Question?(Choose all valid options)</h1>
	<input type='checkbox' name='q1' value='a'>A<br>
	<input type='checkbox' name='q1' value='b'>B<br>
	<input type='checkbox' name='q1' value='c'>C<br>
	<input type='checkbox' name='q1' value='d'>D<br>

Ex:
----
	<h3>Choose Your Known Language</h3>
      <input type='checkbox' name='language' value='eng'>English<br>
      <input type='checkbox' name='language' value='tel'>Telugu<br>
      <input type='checkbox' name='language' value='hin'>Hindi<br>
      <input type='checkbox' name='language' value='tamil'>Tamil<br>

Choose your country
Choose your state

How to implement dropdown/select box:
-------------------------------------------------------------
	  <h1>Choose Your State</h1>
      <select name="state" multiple>
        <option value="ap">Andhra Pradesh</option>
        <option value="ts">Telangana</option>
        <option value="tn">Tamil Nadu</option>
        <option value="ka">Karnatak</option>
        <option value="od">Odisha</option>
      </select>
      <input type="submit" name="" value="Submit">

Radio Vs Checkbox Vs Select box:
--------------------------------------------------
-->If few options are available and we have to choose only one option:radio
-->If few options are available and we can select any number of options:checkbox
-->If very huge number of options are available and we can select any number of options: dropdown / select box.

Text Area:
-----------------
	  <h1>Enter Feedback</h3>
      <textarea name="feedback" rows="8" cols="80"></textarea><br>
      <input type="submit" name="" value="Submit">

HTML Validations:
----------------------------
1).required
2).email
3).Min and max length
4).Password min contains 8 characters.

Case-1:
	The value should contain min 5 characters and max 10 characters.
Ex:
	<form  action="thankyou.html" method="post">
	Enter Value:<input type='text' name='val' value='' pattern=".{5,10}" title="Minimum 5 characters and maximum 10 characters are allowed"/>
      <input type="submit" name="" value="Submit">
    </form>

Case-2:
	The value should contain only digits, exactly 10 digits only allowed.
	pattern='[0-9]{10}'
	<form  action="thankyou.html" method="post">
	Enter Value:<input type='text' name='val' value='' pattern="[0-9]{10}" title="Invalid value"/>
      <input type="submit" name="" value="Submit">
    </form>

Case-3:
	The value should contain onl;y digits, exactly 10 digits only allowed. But first digit should be either 6 or 7 or 8 or 9.
	pattern='[6-9][0-9]{9}'
	==>[6-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]

Case-4:Password atleast 8 characters must be required.
The first character should be upper case alphabate symbol.
Remaining any alpha numeric.
	pattern='[A-Z][a-zA-Z0-9]{7}[a-zA-Z0-9]*'

Ex:
	<form  action="thankyou.html" method="get">
      Enter Value:<input type='text' name='val' value='' pattern="[A-Z][a-zA-Z0-9]{7}[a-zA-Z0-9]*" title="invalid value"/>
      <input type="submit" name="" value="Login">
    </form>

we can put first letter upper case and remaining 7 letters is small and last character is special symbol.

[abc]--->Either a or b or c
[a-zA-Z0-9]-->Any alphanumeric character
[^abc]-->Except a and b and c any other character
[^a-zA-Z0-9]-->Any character except alpha numeric character.

pattern='[A-Z][a-z]{2}[^a-zA-Z0-9]'

How to include spaces in HTML:
-----------------------------------------------
1).&nbsp to add a single space.
2).&ensp to add 2 spaces.
3).&emsp to add 4 spaces.
4).<br> to add a line break.
5).<hr> line 

	Enter Value:&nbsp;&nbsp;&nbsp<input type='text' name='val' value='' pattern="[0-9]{10}" title="Invalid value"/>
   

CSS:Cascading Style Sheets)
=========================
-->The main objective of CSS to add styles to HTML. 
-->CSS describes how HTML elements are displayed on a page.
-->Styling includes colors, fonts, size,borders etc.....
-->We can define CSS styling inside HTML. But it is highly recommended to define styling inside a separate CSS file(.css extension) and link that file to HTML.

Various ways to define style for HTML elements:
------------------------------------------------------------------------
-->We can define styles in 3-ways.
1).In Line
2).By using <style> tag
3).By using css files

1).In Line:
			<h1 style="color:red">This is My First Css Program</h1>

-->Define style at tag level is not recommended bcoz it increases complexity as every html page contains 1000s of tags.

2).By using style tag:
--------------------------------
	<style >
		h1{
		 color:red;
		}
	</style>
  <body>
    <h1>This is css program</h1>
    <h1>This is css program</h1>
  </body>

-->This way of defining style is not recommended because it is applicable for current page but not for remaining pages.

3).By using css file:
-----------------------------
Basic structure of css file:
---------------------------------------	
tagname{
		property:value;
		}
Ex:
	h1{
	color:red;
	}

-->Once we define css file, we can link it to HTML by using <link> tag inside <head> part of html.
<head>
	<link rel="stylesheet" href="style1.css">
</head>

Demo App-1:
-------------------
<title>CSS Demo</title>
    <link rel="stylesheet" href="style1.css">
  </head>
  <body>
<h1>This is First CSS Example</h1>
  <p>Paragraph</p>
  <h2>The list of movies:</h2>
  <ul>
    <li>Bahubaki</li>
    <li>Bheemla Nayak</li>
    <li>RRR</li>
    <li>Avathaar</li>
  </ul>
  <h3>Soon we will discuss remaining things</h3>
  </body>

style1.css:
---------------
h1{
  color: red;
}
h2{
  color: blue;
}
h3{
  color: red;
}
p{
  color: green;
}
ul{
  color: orange;
}

Working with static files:
======================
-->Up to this just we injected normal text data into templates by using templates tagas .
-->But sometimes our requirement is to insert static files like images,css files etc inside template file.

Process to include static files inside template:
========================================
1).Create folder named with 'static' inside main project folder. It is exactly same as creating 'templates' folder.
2).In that 'static' folder create 'images' folder to place image files.
3).Add static directory path to settings.py file, so that django can aware of our images.


1).Create a project.
	
D:\Django_17Mar_11AM>django-admin startproject staticfilesproject

D:\Django_17Mar_11AM>cd staticfilesproject

D:\Django_17Mar_11AM\staticfilesproject>py manage.py startapp testapp

-->Add app in settings.py

settings.py
----------------
STATIC_DIR=BASE_DIR/'static'

STATIC_URL = 'static/'
STATICFILES_DIRS=[STATIC_DIR,]

4).Make sure all the paths are correct or not
		http://127.0.0.1:8000/static/images/news.jpg

5).Use templates tag to insert image.
	At the begining of HTML just after <!DOCTYPE html>, we have to include the following template tag.
			{% load static %}

-->Just we have to coneying to the Django to load all static files.

We have to include image file as follows:
<img src="{% static "images/diwine.jpg" %}" alt="">

results.html
-------------------
		<h1>Hello friends, The short cut way to see diwine on the earth:</h1>
		<h2>The available brands are:</h2>
		<ul>
			<li>{{b1}}</l1>
			<li>{{b2}}</l1>
			<li>{{b3}}</l1>
		</ul>
		<img src="{% static "images/mbar.jpg" %}" alt="">

views.py
------------
def diwine_view(request):
	brands={'b1':'KF','b2':'RC','b3':'Boom Boom'}
	return render(request,'testapp/results.html' context=brands)

urls.py
----------
from testapp import views

path('dewine/','views.diwine_view')

How to include css files:
-------------------------------------
Mahesh News Portal Application:
--------------------------------------------------
D:\Django_17Mar_11AM>django-admin startproject maheshnewsproject

D:\Django_17Mar_11AM>cd maheshnewproject

D:\Django_17Mar_11AM\maheshnewsproject>py manage.py startapp testapp

-->Add app in settings.py

-->Create a folder templates

-->Update this one in settings.py
	TEMPLATE_DIR = BASE_DIR/'templates'

-->Create a static folder
			Inside static folder craete css and images folders.
			STATIC_DIR = BASE_DIR/'static'
			STATICFILES_DIRS = [STATIC_DIR,]

views.py
------------
from django.shortcuts import render
def news_info(request):
    return render(request,'testapp/index.html')

index.html
----------------
<!DOCTYPE html>
{% load static %}
<link rel="stylesheet" href={% static 'css/demo.css' %}>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
<h1>Welcome To MAHESH NEWS Portal</h1>
<img src="{% static 'images/news.jpg' %}" alt="">
<ul>
  <li><a href="movies/">Movies Information</a></li>
  <li><a href="sports/">Sports Information</a></li>
  <li><a href="politics/">Politics Information</a></li>
</ul>
  </body>
</html>

demo.css
-------------
body{
  background: yellow;
  color:red;
  text-align:center;
}
ul{
	font-size:20px;
	text-align:left;
}
img{
  height: 250px;
  width: 300px;
  margin: 25px;
  border: 5px solid red;
}

views.py
------------
def movies_info(request):
	head_msg = 'Movies Infomration'
	sub_msg1 = 'Kantara is very good movie'
	sub_msg2 = 'Planning for aashiqui-3 with Mahesh sir & Sunny'
	sub_msg3 = Dont go for movies....practice Django
	type = 'movies'
    my_dict={'head_msg':head_msg,'sub_msg1':sub_msg1,'sub_msg2':sub_msg2,
    'sub_msg3':sub_msg3,'type':type}
    return render(request,'testapp/news.html',my_dict)

news.html
----------------
<!DOCTYPE html>
{% load static %}
<link rel="stylesheet" href={% static 'css/demo.css' %}>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Mahesh News Channel Portal</title>
  </head>
  <body>
    <h1>{{head_msg}}</h1>
    <ul>
      <li>{{sub_msg1}}</li>
      <li>{{sub_msg2}}</li>
      <li>{{sub_msg3}}</li>
    </ul>
    {% if type == 'movies' %}
    <img src="{% static 'images/1.jpg '%}" alt="">
    <img src="{% static 'images/2.jpg '%}" alt="">
    <img src="{% static 'images/3.jpg '%}" alt="">
    {% elif type == 'sports' %}
    <img src="{% static 'images/4.jpg '%}" alt="">
    <img src="{% static 'images/5.jpg '%}" alt="">
    <img src="{% static 'images/6.jpg '%}" alt="">
    {% elif type == 'politics' %}
    <img src="{% static 'images/7.jpg '%}" alt="">
    <img src="{% static 'images/8.jpg '%}" alt="">
    <img src="{% static 'images/9.jpg '%}" alt="">
    {% endif %}
  </body>
</html>

views.py
------------
def news_info(request):
    return render(request,'testapp/index.html')

def movies_view(request):
    head_msg = 'Movies Information'
    sub_msg1 = 'Yesterady DASAR was released'
    sub_msg2 = 'Planning for aashiqui-3 with Mahesh sir & Sunny'
    sub_msg3 = 'Dont go for movies.....Practice Django.....'
    type = 'movies'
    my_dict = {'head_msg':head_msg,'sub_msg1':sub_msg1,'sub_msg2':sub_msg2,
    'sub_msg3':sub_msg3,'type':type}
    return render(request,'testapp/news.html',my_dict)

def sports_view(request):
    head_msg = 'Sports Information'
    sub_msg1 = 'Yesterady IPL was stared'
    sub_msg2 = 'Sunday match will be RCB & MI'
    sub_msg3 = 'Gurath won yesterday match'
    type = 'sports'
    my_dict = {'head_msg':head_msg,'sub_msg1':sub_msg1,'sub_msg2':sub_msg2,
    'sub_msg3':sub_msg3,'type':type}
    return render(request,'testapp/news.html',my_dict)

def politics_view(request):
    head_msg = 'Politics Information'
    sub_msg1 = 'India Pm was Modi ji'
    sub_msg2 = 'April Budget has released '
    sub_msg3 = 'Telangana CM Mahesh Sir'
    type = 'politics'
    my_dict = {'head_msg':head_msg,'sub_msg1':sub_msg1,'sub_msg2':sub_msg2,
    'sub_msg3':sub_msg3,'type':type}
    return render(request,'testapp/news.html',my_dict)

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.news_info),
    path('movies/', views.movies_info),
    path('sports/', views.sports_info),
    path('politics/', views.politics_info),
]
-->Starts erver send request.

											Chapter-4
											=========
									Working with Models
											      &
											Databases

Working with Models and Databases:
================================
-->As part of web application development, compulsory we required to interact with database to store our data and to retrieve our stored data.
-->Django provides a in-built support for databse operations. Django provides one in-built database sqlite3.
-->For small to medium applications this databse is more enough. Django can provide support for other databses also like oracle, Mysql, MongoDB etc....

Databse Configuration:
----------------------------------
-->Django bydefault provides sqlite3 databse. If we want to use this databse, we are not required to do any configuration.
-->The default sqlite3 configurations in settings.py file are declared as follows.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

Database connection with Mysql:
============================
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'djangodb',
		'USER':'root',
		'PASSWORD':'root',
		'HOST':'localhost',
		'PORT':3306,
    }
}

>>select * from global_name;

Database connection with Oracle:
==============================
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': 'ORCL',
		'USER':'scott',
		'PASSWORD':'tiger',
		'HOST':'localhost',
		'PORT':1521,
    }
}

-->If we don't want to sqlite3 databse then we have to configure our own databse with the following parameters.
		1).ENGINE:Name of the database engine
		2).NAME:Database name
		3).USER:Database login user name
		4).PASSWORD:Database login password
		5).HOST:The machine on which databse server is running
		6).PORT:The port number on which database server is running.
Note:Most of the times HOST and PORT are optional.

How to check Django Database Connection:
----------------------------------------------------------------
-->We can check whether django database configurations are properly configured or not by using the following command from the shell.
			D:\DjangoProjects\empProject>py manage.py shell
>>> from django.db import connection
>>> c=connection.cursor()
-->If we are not getting any error means our database configurations are proper.

Model Class:
-------------------
-->A model is a python class which contains database information.
-->It contains fields and behaviours of the data what we are storing.
-->Each model maps to one database table.
-->Everey model is a python class which is the child class of (django.db.models.Model).
-->Each attribute of the model represents database field(Column name in table).
-->We have to write all model classes inside 'models.py' file.

Step-1:Create a project & application and link them in settings.py
	D:\Django_17Mar_11AM>django-adminstartproject modelproject
	D:\Django_17Mar_11AM>cd modelproject
	D:\Django_17Mar_11AM\modelproject>py manage.py startapp testapp

	D:\Django_17Mar_11AM>cd modelproject>pip list

Step-2:After creating project and application, in models.py file write the following code.

models.py
---------------
from django.db import models
# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)

Note:
	This model class will be converted into database table. Django is responsible for this conversion.

table_name:appname_Employee
				 :testapp_employee
Fields:eno,ename,easl and eaddr, and one extra field:id
Behaviours:eno is of integer, ename is char.
Model class = database table name + field name + field behaviours

Converting Model class into Database specific SQL code:
------------------------------------------------------------------------------------
Once we write Model class, we have to migrate the corresponding SQL code, for this we have to use makemigrations.
			D:\DjangoProjects\empProject>py manage.py makemigrations

How to see the corresponding SQL code of migrations:
---------------------------------------------------------------------------------
			D:\DjangoProjects\empProject>py manage.py sqlmigrate testApp 0001
BEGIN;
--
-- Create model Employee
--
CREATE TABLE "testApp_employee" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "eno" integer NOT NULL, "ename" varchar(30) NOT NULL, "esal" real NOT NULL, "eaddr" varchar(30) NOT NULL);
COMMIT;

How to execute generated SQL code(migrate command):
-----------------------------------------------------------------------------------
After generating sql code, we have to execute that sql code to create table in database. For this we have to use 'migrate' command.
				D:\DjangoProjects\empProject>py manage.py migrate

What is the advantage of creating Tables with 'migrate' command:
--------------------------------------------------------------------------------------------------
If we use 'migrate' command, then all django required tables will be created in addition to our application specific tables. If we create table manually with sql code, then only our application specific table will be created and django may not work properly. Hence it is highly recommended to create tables with 'migrate' command.

How to check created table in Django admin interface:
---------------------------------------------------------------------------------
We have to register model class in 'admin.py' file.

admin.py:
----------------
from django.contrib import admin
from testApp.models import Employee
# Register your models here.
admin.site.register(Employee)

Creation of Super User to login to admin interface:
---------------------------------------------------------------------------
-->We can create super user by using the command.
		D:\DjangoProjects\empProject>py manage.py createsuperuser
-->We can login to admin interface:
		Start server and login to admin interface using
				http://127.0.0.1:8000/admin/

Difference between makemigrations and migrate:
-------------------------------------------------------------------------
'makemigrations' is responsible to generate SQL code for python model class where as 'migrate' is responsible to execute the SQL code so that tables will be created in the database.

Read data from the database and display for the end user?
---------------------------------------------------------------------------------------
1).Start project
2).Start app
3).Add app in settings.py
4).Add database configurations in settings.py
5).Test database connections
6).Create Model class
7).Makemigrations and migrate
8).Register model and modeladmin inside admin.py
9).Createsuperuser
10).login to admin interface and check table created or not
11).Template file and static file and corresponding configurations in settings.py
12).view function to communicate with database and to get data send this data to template file which is responsible to display to end user

models.py
--------------
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=20)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)

-->Makemigrations and migrate
	D:\DjangoOfflineProject\model2project>py manage.py makemigrations

	D:\DjangoOfflineProject\model2project>py manage.py migrate

-->Register model class and modelAdmin class in admin.py

admin.py
--------------
from django.contrib import admin
from testapp.models import Employee
# Register your models here.
class EmployeeAdmin(admin.ModelAdmin):
    list_display=['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

-->Createsuperuser
	D:\DjangoOfflineProject\model2project>py manage.py createsuperuser

-->Create a function in views.py
views.py
------------
def empdata_view(request):
    emp_list=Employee.objects.all()
    my_dict={'emp_list':emp_list}
    return render(request,'testapp/emp.html',context=my_dict)

emp.html
--------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Employee Data</title>
    <link rel="stylesheet" href="{% static 'css/emp1.css' %}">
  </head>
  <body>
    <h1>Employee List</h1><hr>
    {% if emp_list %}
    <table border=1>
      <thead>
        <th>ENO</th>
        <th>ENAME</th>
        <th>ESAL</th>
        <th>EADDR</th>
      </thead>
      {% for emp in emp_list %}
      <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
      </tr>
      {% endfor %}
    </table>
    {% else %}
    <p>No Records Found !!!!</p>
    {% endif %}
  </body>
</html>

emp1.css
--------------
body{
  background: yellow;
  color:red;
}
h1{
  text-align: center;
}
table{
  margin: auto;
}

urls.py
----------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('emp/', views.empdata_view),
]

MVT Architecture:
----------------------------
V--->View Function/Class------->Business Logic---->Python code
T--->Template---->Presentation logic(HTML code)
M--->Model---->Related to database.

1).End user sending the request.
		http://127.0.0.1:8000/emp/

2).View function will get the request.
	def empdata_view(request):
		emp_list = Employee.objects.all()
		my_dict = {'emp_list':emp_list}
    return render(request,'testapp/emp.html',my_dict)

3).View asking model to connect with database and provide required data.
		emp_list = Employee.objects.all()

4).Model will communicate with database and provide required data to the view function.
			emp_list = Employee.objects.all()

5).View will send that data to template file.
	my_dict = {'emp_list':emp_list}
    return render(request,'testapp/emp.html',my_dict)

6).Template file will prepare HttpResponse with required data and provide to view function.

7).View returns that HTTP response to the end user.


Questions related to models and templates?
-----------------------------------------------------------------
1).How to configure database inside settings.py?
2).How to check the connections?
3).How to define model class insdie models.py?
4).How to perform makemigrations?
5).How to perform migarte?
6).What is diff between make migrations and migarate?
7).What is advantage of creating table by using migrate command instead of creating manually in the database?
8).How to add model to admin interface inside admin.py?
9).To display total data, how to write model admin class inside admin.py?
10).How to create superuser?
11).How to login to admin interface & add data to our table?
12).How to see generated sql code as result of makemigrations?

How to generate fake data for application
====================================
from faker import Faker
fakegen=Faker()
name=fakegen.name()
print(name)
fname=fakegen.first_name()
print(fname)
lname=fakegen.last_name()
print(lname)
date1=fakegen.date()
print(date1)
number=fakegen.random_number(5)
print(number)
email1=fakegen.email()
print(email1)
city=fakegen.city()
print(city)
print(fakegen.random_int(min=0,max=9999))
print(fakegen.random_element(elements=('sunny','bunny','vinny','chinny')))

Phone Number Generation:
----------------------------------------
from random import *
def phonenumbergen():
	d1=randint(6,9)
	num=""+str(d1)
	for i in range(9):
		num=num+str(randint(0,9))
	return int(num)
for i in range(10):
	print(phonenumbergen())

Insert data into model class by using faker module:
=============================================
D:\Django_17Mar_11AM>django-adminstartproject modelproject3
D:\Django_17Mar_11AM>cd modelproject3
D:\Django_17Mar_11AM\modelproject3>py manage.py startapp testapp

-->Add app in settings.py

-->Database configuration(Use Mysql)
-->Create a adatabase in Mysql(studentdb)

-->Check database connections.

models.py
--------------
class Student(models.Model):
    rollno=models.IntegerField()
    name=models.CharField(max_length=30)
    dob=models.DateField()
    marks=models.IntegerField()
    email=models.EmailField()
    phonenumber=models.BigIntegerField()
    address=models.TextField()

-->makemigrations and migrate.

admin.py
--------------
from testapp.models import Student
# Register your models here.
class StudentAdmin(admin.ModelAdmin):
    list_display=['rollno','name','dob','marks','email','phonenumber','address']
admin.site.register(Student,StudentAdmin)

-->Create a file with the name populate_student_info.py under modelproject3 folder.

populate_student_info.py
-------------------------------------
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','modelproject3.settings')
import django
django.setup()

from testapp.models import Student
from faker import Faker
from random import *
fake=Faker()
def phonenumbergen():
	d1=randint(6,9)
	num=""+str(d1)
	for i in range(9):
		num=num+str(randint(0,9))
	return int(num)
def populate(n):
    for i in range(n):
        fake=Faker()
        frollno=fake.random_int(min=1,max=999)
        fname=fake.name()
        fdob=fake.date()
        fmarks=fake.random_int(min=1,max=100)
        femail=fake.email()
        fphonenumber=phonenumbergen()
        faddress=fake.address()
        Student.objects.get_or_create(rollno=frollno,name=fname,
dob=fdob,marks=fmarks,email=femail,phonenumber=fphonenumber,address=faddress)
n=int(input("Enter number of records:"))
populate(n)
print(f'{n} Records Inserted Successfully')

views.py
------------
from testapp.models import Student
# Create your views here.
def student_view(request):
    #student_list=Student.objects.all()
    #student_list=Student.objects.filter(marks__lt=35)
    #student_list=Student.objects.filter(name__startswith='A')
    student_list=Student.objects.all().order_by('-marks')
    my_dict={'student_list':student_list}
    return render(request,'testapp/std.html',my_dict)

urls.py
----------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('student/', views.student_view),
]

std.html
------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Student Data</title>
    <link rel="stylesheet" href={%static 'css/std.css'%}>
  </head>
  <body>
    <h1>Student Information</h1>
    {% if student_list %}
      {% for student in student_list %}
      <h2>{{student.name}} information:</h2>
      <ul>
        <li>Student RollNo:{{student.rollno}}</li>
        <li>Student DOB:{{student.dob}}</li>
        <li>Student Marks:{{student.marks}}</li>
        <li>Student Email:{{student.email}}</li>
        <li>Student Phone Number:{{student.phonenumber}}</li>
        <li>Student Address:{{student.address}}</li>
      </ul>
      <br>
      {% endfor %}
    {% else %}
    <p>No records found in the database</p>
    {% endif %}
  </body>
</html>

std.css
-----------
body{
  background: red;
  color: white;
}
h1{
  text-align: center;
}
h2{
  color: yellow;
}

How to generated fake data:
------------------------------------------
1).By using faker module and our own customized code by using random module.

Another way to generate fake data:
----------------------------------------------------
-->django-seed  is a django based customized application to generate fake data for every model automatically.

-->Internally this application using faker module only.

Steps to use django-seed:
-------------------------------------
1).pip install django-seed.
2).add 'django_seed' application in our INSTALLED_APPS inside settings.py.
3).generate and send fake data to the models.
		py manage.py seed testapp --number=10

	INSTALLED_APPS = ['testapp','django_seed']

Generate fake data by using django_seed:
-------------------------------------------------------------
D:\Django_17Mar_11AM>django-adminstartproject modelproject4
D:\Django_17Mar_11AM>cd modelproject4
D:\Django_17Mar_11AM\modelproject4>py manage.py startapp testapp

-->Add app in settings.py

-->Database configuration(Use Mysql)
-->Create a adatabase in Mysql(seeddb)

-->Check database connections.

models.py
---------------
class Student(models.Model):
    rollno=models.IntegerField()
    name=models.CharField(max_length=30)
    dob=models.DateField()
    marks=models.IntegerField()
    email=models.EmailField()
    phonenumber=models.CharField(max_length=30)
    address=models.TextField()

-->Why phonenumber taken as charfield....

from faker import Faker
fake = Faker()
for i in range(10):
	phonenumber = fake.phone_number()
	print(phonenumber)

-->Makemigrations and migrate.

admin.py
-------------
from testapp.models import Student
class StudentAdmin(admin.ModelAdmin):
    list_display =['rollno','name','dob','marks','email','phone_number','address']
admin.site.register(Student,StudentAdmin)

-->To insert data to the table.
			py manage.py seed testapp --number=10

maheshjobs project including database stuff:
-----------------------------------------------------------------
views
template files
static files
database

Project Name:maheshjobs
	
						Welcome to maheshjobs
								contenious updates for every minute

						Hyderabad Jobs			Bangalore Jobs				Pune Jobs
											
Project Name:maheshjobs
---------------------------------------
D:\Django_17Mar_11AM>django-admin startproject maheshjobs
D:\Django_17Mar_11AM>cd maheshjobs
D:\Django_17Mar_11AM\maheshjobs>py manage.py startapp testapp

-->Add app in settings.py

-->Create model class inside models.py
models.py
---------------
class HydJobs(models.Model):
    date = models.DateField()
    company = models.CharField(max_length=30)
    title = models.CharField(max_length=30)
    eligibility = models.CharField(max_length=30)
    address = models.CharField(max_length=30)
    email = models.EmailField()
    phonenumber = models.BigIntegerField()
class PuneJobs(models.Model):
    date = models.DateField()
    company = models.CharField(max_length=30)
    title = models.CharField(max_length=30)
    eligibility = models.CharField(max_length=30)
    address = models.CharField(max_length=30)
    email = models.EmailField()
    phonenumber = models.BigIntegerField()
class BngJobs(models.Model):
    date = models.DateField()
    company = models.CharField(max_length=30)
    title = models.CharField(max_length=30)
    eligibility = models.CharField(max_length=30)
    address = models.CharField(max_length=30)
    email = models.EmailField()
    phonenumber = models.BigIntegerField()

-->database configurations
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'newstudentdb',
		'USER' : 'root',
		'PASSWORD' : 'root',
		'HOST' : 'localhost',
		'PORT' : 3306,
    }
}

-->Test database connections.
D:\Django_17Mar_11AM\maheshjobs>py manage.py shell
Python 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.db import connection
>>> c = connection.cursor()
>>>

-->Makemigrations and migrate
D:\Django_17Mar_11AM\maheshjobs>py manage.py makemigrations
Migrations for 'testapp':
  testapp\migrations\0001_initial.py
    - Create model BngJobs
    - Create model HydJobs
    - Create model PuneJobs

D:\Django_17Mar_11AM\maheshjobs>py manage.py migrate

admin.py
-------------
from testapp.models import HydJobs,PuneJobs,BngJobs
# Register your models here.
class HydJobsAdmin(admin.ModelAdmin):
    list_display = ['date','company','title','eligibility','address','email','phonenumber']
admin.site.register(HydJobs,HydJobsAdmin)

class PuneJobsAdmin(admin.ModelAdmin):
    list_display = ['date','company','title','eligibility','address','email','phonenumber']
admin.site.register(PuneJobs,PuneJobsAdmin)

class BngJobsAdmin(admin.ModelAdmin):
    list_display = ['date','company','title','eligibility','address','email','phonenumber']
admin.site.register(BngJobs,BngJobsAdmin)

-->Create superuser.
D:\Django_17Mar_11AM\maheshjobs>py manage.py createsuperuser
Username (leave blank to use 'mahesh'): mahesh
Email address: abc@gmail.com
Password:
Password (again):
The password is too similar to the username.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

-->Create a function in views.py

views.py
------------
from testapp.models import HydJobs,PuneJobs,BngJobs
# Create your views here.
def homepage_view(request):
    return render(request,'testapp/index.html')

def hydjobs_view(request):
    jobs_list = HydJobs.objects.all()
    my_dict = {'jobs_list':jobs_list}
    return render(request,'testapp/hydjobs.html',my_dict)

-->Create templates folder and static folder and add these in settings.py

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.homepage_view),
]

index.html
----------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <title>Mahesh Jobs</title>
    <link rel="stylesheet" href="{% static 'css/jobs1.css' %}">
  </head>
  <body>
    <div class="container">
      <div class="jumbotron">
      <h1>Welcome To MAHESHJOBS</h1>
      <p>Continuos Job Updates For Every Hour.....</p>
      <a class="btn btn-primary btn-lg" href="hydjobsinfo/" role="button">Hyderabd Jobs</a>&nbsp;&nbsp;&nbsp;&nbsp
      <a class="btn btn-primary btn-lg" href="#" role="button">Pune Jobs</a>&nbsp;&nbsp;&nbsp;&nbsp
      <a class="btn btn-primary btn-lg" href="#" role="button">Bangalore Jobs</a>
    </div>
      </div>
  </body>
</html>

hydjobs.html
--------------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/jobs1.css' %}">
  </head>
  <body>
    <h1>Hyderebad Jobs Information</h1>
    {% if jobs_list %}
    <table border="2">
      <thead>
        <th>Date</th>
        <th>Company</th>
        <th>Title</th>
        <th>Eligibility</th>
        <th>Address</th>
        <th>Email</th>
        <th>PhoneNumber</th>
      </thead>
      {% for job in jobs_list %}
      <tr>
        <td>{{job.date}}</td>
        <td>{{job.company}}</td>
        <td>{{job.title}}</td>
        <td>{{job.eligibility}}</td>
        <td>{{job.address}}</td>
        <td>{{job.email}}</td>
        <td>{{job.phonenumber}}</td>
      </tr>
      {% endfor %}
    </table>
    {% else %}
    <p id='specialp'>No Jobs In Hyderabs......</p>
    {% endif %}
  </body>
</html>

populate.py
-----------------
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','maheshjobs.settings')
import django
django.setup()

from testapp.models import HydJobs
from faker import Faker
from random import *
fake = Faker()
def phonenumbergen():
    d1 = randint(6,9)
    num = "" + str(d1)
    for i in range(9):
        num = num + str(randint(0,9))
    return int(num)
def populate(n):
    #['date','company','title','eligibility','address','email','phonenumber']
    for i in range(n):
        fdate = fake.date()
        fcompany = fake.company()
        ftitle = fake.random_element(elements=('Project Manager','Team Lead','Software Engineer','Associate Engineer'))
        feligibility = fake.random_element(elements=('B.Tech','M.Tech','MCA','Phd','Mahesh Sir Student'))
        faddress = fake.address()
        femail = fake.email()
        fphonenumber = phonenumbergen()
        hyd_jobs_record = HydJobs.objects.get_or_create(
            date = fdate,
            company = fcompany,
            title = ftitle,
            eligibility = feligibility,
            address = faddress,
            email = femail,
            phonenumber = fphonenumber,
            )
n = int(input("Enter number of records:"))
populate(n)
print(f'{n} Records inserted successfully......')

urls.py
---------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.homepage_view),
    path('hydjobsinfo/', views.hydjobs_view),
]

job1.css
------------
.container{
  margin-top: 200px;
  text-align: center;
}
.container .jumbotron{
  background: red;
  color: white;
}
.jumbotron a{
  background: yellow;
  color: red;
  border: 2px solid green;
}
#specialp{
  color: red;
  text-align: center;
  font-size: 50px;
}
table{
  color: yellow;
  background: red;
  margin: auto;
  font-size: 20px;
}

											Chapter-5
											Working With
											Django Forms
											=============
Django Forms:
=============
-->It is the very important concept in web development. 
-->The main purpose of forms is to take user input. 
Ex: 
	login form, registration form, enquiry form etc 
-->From the forms we can read end user provided input data and we can use that data based on requirement. We may store in the database for future purpose. We may use just for validation/authentication purpose etc.
-->Here we have to use Django specific forms but not HTML forms.

Advantages of Django Forms over HTML Forms:
-----------------------------------------------------------------------
1).We can develop forms very easily with python code.
2).We can generate HTML Form widgets/components (like textarea, email, pwd etc) very quickly.
3).Validating data will become very easy.
4).Processing data into python data structures like list, set etc will become easy.
5).Creation of Models based on forms will become easy etc.

model class-->Converted into database table.
form class-->converted into html form.

Process to generate Django Forms:
----------------------------------------------------
Step-1: Creation of forms.py file in our application folder with our required fields.

forms.py: 
---------------	
from django import forms
class StudentForm(forms.Form):
    name=forms.CharField()
    marks=forms.IntegerField()
Note:
	name and marks are the field names which will be available in html form

		forms.py=====>views.py======>Template file(HTML)

Step-2: usage of forms.py inside views.py file:
---------------------------------------------------------------------
views.py file is responsible to send this form to the template html file

views.py
------------
from django.shortcuts import render
from testapp.forms import forms
# Create your views here.
def studentinput_view(request):
    form=StudentForm()
    my_dict={'form':form}
    return render(request,'testApp/input.html',context=my_dict)

Alternative Short Way:
------------------------------------
def student_input_view(request):
	form=forms.StudentForm() 
	return render(request,'testapp/input.html',{'form':form})

Note: context parameter is optional.We can pass context parameter value directly without using keyword name 'context'

Step-3: Creation of html file to hold form:
--------------------------------------------------------------
Inside template file we have to use template tag to inject form {{form}}

input.html
--------------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Student Form</title>
<link rel="stylesheet" href="{% static '/css/form1.css' %}">
  </head>
  <body>
    <h1>Student Input Form</h1>
    <div class="container" align="center">
      <form method="post">
          {{form.as_p}}
        <input type="submit" name="" class="btn btn-primary" value="Submit">
      </form>
    </div>
  </body>
</html>

form1.css
---------------
h1{
	text-align:center;
}
body{
	background:yellow;
	color:red;
}

urls.py
---------
		path('data/',views.student_input_view)

-->If we submit this form we will get 403 status code response 
-->Forbidden (403)
-->CSRF verification failed. Request aborted.

Help 
Reason given for failure:

CSRF token missing or incorrect.

CSRF (Cross Site Request Forgery) Token:
---------------------------------------------------------------
-->Every form should satisfy CSRF (Cross Site Request Forgery) Verification, otherwise Django won't accept our form. 
-->It is meant for website security. Being a programmer we are not required to worry anything about this. Django will takes care everything.
-->But we have to add csrf_token in our form.
	<h1>Registration Form</h1>
    <div class="container" align="center">
      <form method="post">
          {{form.as_p}}
          {% csrf_token %}
      <input type="submit" name="" value="Register">
      </form>
    </div>

If we add csrf_token then in the generate form the following hidded field will be added,which makes our post request secure.

<input type='hidden' name='csrfmiddlewaretoken' value='1ZqIJJqTLMVa6RFAyPJh7pwzyFmdiHzytLxJIDzAkKULJz4qHcetLoKEsRLwyz4h'/>

The value of this hidden field is keep on changing from request to request.Hence it is impossible to forgery of our request.

If we configured csrf_token in html form then only django will accept our form.

How to process input data from the form inside views.py file:
-------------------------------------------------------------------------------------------
Inside views.py, We have to read data provided by end user and we have to use that data based on our requirement.

form=StudentForm()-->empty form object to display form to the end user.
form=StudentForm(request.POST)-->This form object contains end user provided 
data.

cleaned_data-->dictionary which contains end user provided data.
from.cleaned_data['name']-->The name entered by end user.
from.cleaned_data['marks']-->The marks entered by end user.

form.is_valid()--->To check whether validations are successful or not.

Difference bet between GET & POST:
------------------------------------------------------
There are multiple ways to send GET request:
	-->Typing URL in the address bar and enter
	-->Clicking on hyperlinks
	-->Submitting the HTML FORM without method attribute.
	-->	Submitting the HTML FORM with method attribute of GET value.	
There is only one way to send POST request
	-->Submitting the HTML FORM with method attribute POST value.

views.py
------------
from testapp.forms import StudentForm
# Create your views here.
def student_info(request):
    submitted=False
    sname=''
    if request.method=='POST':
        form=StudentForm(request.POST)
        if form.is_valid():
            print("Form validation success and print data")
            print('Name:',form.cleaned_data['name'])
            print('RollNo:',form.cleaned_data['rollno'])
            print('Marks:',form.cleaned_data['marks'])
            sname=form.cleaned_data['name']
            submitted=True
    form=StudentForm()
    return render(request,'testapp/input.html',{'form':form,'submitted':submitted,
	'sname':sname})

input.html
----------------
<div class="container" align="center">
      {% if submitted %}
        <h1>Student with the name:{{sname}} processed successfully</h1>
        <h2>Enter next student information</h2>
      {% else %}
        <h1>Student Input Form</h1>
      {% endif %}<hr>
<form method="post">
        {{form.as_p}}
        {%csrf_token%}
        <input type="submit" name="" value="Submit Marks">
</form>


feedback project: 
-------------------------
D:\Django_17Mar_11AM>django-admin startproject feedbackproject
D:\Django_17Mar_11AM>cd feedbackproject
D:\Django_17Mar_11AM>feedbackproject>py manage.py startapp testapp

forms.py
------------
from django import forms
class FeedBackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

views.py
------------
from testapp.forms import FeedBackForm
def feedback_view(request):
    submitted=False
    name=''
    if request.method=='POST':
        form=FeedBackForm(request.POST)
        if form.is_valid():
            print("Form validation success and printing feedback information")
            print("*"*55)
            print("Name:",form.cleaned_data['name'])
            print("Rollno:",form.cleaned_data['rollno'])
            print("MailID:",form.cleaned_data['email'])
            print("Feedback:",form.cleaned_data['feedback'])
            submitted=True
            name=form.cleaned_data['name']
    form=FeedBackForm()
    return render(request,'testapp/feedback.html',{'form':form,'submitted':submitted,
	'name':name})

feedback.html
---------------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href={%static 'css/feed.css' %}>
  </head>
  <body>
    <div class="container" align='center'>
      {%if submitted %}
      <h1>Hello {{name}}, thanks for providing feedback,
      it is very helpful for us to provide better service</h1>
        {% else %}
    <h1>Student Feedback Form</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" name="" value="SubmitFeedback">
      </form>
      {% endif %}
    </div>
  </body>
</html>

feed.css
------------
body{
	background:yellow;
	color:red;

	background:url();
	background-repeat:no-repeat;
	background-size:cover;
}

urls.py
----------
path('feed/','views.feedback_view')

Form Validations:
--------------------------
-->We can implement validation logic by using 2-ways
1).Explicitly by the programmer by using clean methods
2).By using django inbuilt validators.

***Total validation logic should be written inside forms.py.

Basic OOP knowledge:
---------------------------------
Ex-1:
-------
class Parent:
	def __init__(self):
		self.x=333
	def property(self):
		print("gold+land+cash")
class Child(Parent):
	def education(self):
		print("B-Tech qualification + Job")
c=Child()
c.education()
c.property()
print(c.x)

Ex:
class Form:
	def __init__(self):
		self.cleaned_data={'name':'mahesh'}
class FeedBackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

form=FeedBackForm()
form.cleaned_data['name']

Ex-2:
-------
class Parent:
	def marry(self):
		print("Marry Appalamma")
class Child(Parent):
	def marry(self):
		print("Marry Katrina Kaif")
		super().marry()
c=Child()
c.marry()

1).Explicitly by the programmer by using clean methods:
-------------------------------------------------------------------------------------
Syntax of clean method:clean_fieldname(self)

-->In the Form class, for any field, if we define clean method, then at the time of submit this form, django will call this method automatically to perform validations. If clean method wont raise any error then only request will be processed.

form.py
-----------
class FeedBackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)
	def clean_name(self):
        print("Validating name field")
        inputname = self.cleaned_data['name']
        if len(inputname)<4:
            raise forms.ValidationError('The minimum number of characters in the name field should be 4')
        return inputname

Ex-3:
-------
class TooYoungException(Exception):
	def __init__(self,arg):
		self.msg=arg 
class TooOldException(Exception): 
	def __init__(self,arg): 
		self.msg=arg 
age=int(input("Enter Age:"))
if age>60:
	raise TooYoungException("Plz wait some more time you will get best match soon!!!!")
elif age<18: 
	raise TooOldException("Your age already crossed marriage age...no chance of getting marriage")
else:
	print("You will get match details soon by email......")


form.py
-----------
class FeedBackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)
	def clean_name(self):
        print("Validating name field")
        inputname = self.cleaned_data['name']
        if len(inputname)<4:
            raise forms.ValidationError('The minimum number of characters in the name field should be 4')
        return inputname
    def clean_rollno(self):
        print("Validating rollno field")
        inputrollno = self.cleaned_data['rollno']
        return inputrollno
    def clean_email(self):
        print("Validating email field")
        inputemail = self.cleaned_data['email']
        return inputemail
    def clean_feedback(self):
        print("Validating feedback field")
        inputfeedback = self.cleaned_data['feedback']
        return inputfeedback

views.py
------------
if form.is_valid():
	pass
else:
    print("Some field validate fails")

At server console:
---------------------------
Validating name field
Validating rollno field
Validating email field
Validating feedback field
Form validation and print feedback information

Note:
	Django will call these field level clean methods automatically and we are not required to call these methods explicitly. The names are fixed because these are understandable by Django.

2).By using django inbuilt validators:
--------------------------------------------------------
-->Django provides several inbuilt validators to perform very common validations.
We can use directly and we are not responsible to implement those.
All inbuilt validatorts present in django.core module

forms.py
------------
from django.core import validators
class FeedBackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea,validators=[
	validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])

How to implement custom validators by using same validators parameter?
--------------------------------------------------------------------------------------------------------------
The name should start with 's'.
from django import forms
from django.core import validators
def starts_with_s(value):
    print("starts_with_s function execution")
    if value[0].lower()!='s':
        raise forms.ValidationError("Name should starts with s or S")
class FeedBackForm(forms.Form):
    name=forms.CharField(validators=[starts_with_s])
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea,validators=[
	validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])

mail should contain @gmail.com
------------------------------------------------
mail =mahesh@gmail.com
print(mail[-10:])

def gmail_validator(value):
    print("Checking for gmail validation")
    if value[-10:]!='@gmail.com':
        raise forms.ValidationError("mail extension should be gmail")
class FeedBackForm(forms.Form):
    name=forms.CharField(validators=[starts_with_s])
    rollno=forms.IntegerField()
    email=forms.EmailField(validators=[gmail_validator])
    feedback=forms.CharField(widget=forms.Textarea,validators=[
	validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])


Validation of total form directly by using single clean() method:
-----------------------------------------------------------------------------------------------
We are not required to write separate field level methods. Inside single clean method all validations we can perform.

from django import forms
class FeedBackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

    def clean(self):
        print("Total Form Validation......")
        total_cleaned_data = super().clean()
        print("Validating Name")
        inputname = total_cleaned_data['name']
        if inputname[0].lower() !='s':
            raise forms.ValidationError("Name should starts with s")
		inputrollno = total_cleaned_data['rollno']
        if inputrollno<=0:
            raise forms.ValidationError("Rollno should be >0 ")
        inputmail = total_cleaned_data['email']
        print("Validating email")
        if inputmail[-10:] !='@gmail.com':
            raise forms.ValidationError("Email extension should be gmail")

Rivision:
-------------
forms.py
-------------
from django import forms
class FeedBackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)
    def clean_name(self):
        print("Validating name field")
        inputname = self.cleaned_data['name']
        if len(inputname)<4:
            raise forms.ValidationError('The minimum number of characters in the name field should be 4')
        if inputname[0].lower() !='s':
            raise forms.ValidationError("The first character of the name should be 's'")
        return inputname
    def clean_email(self):
        print("Validating email field")
        inputmail = self.cleaned_data['email']
        if inputmail[-10:] != '@gmail.com' and inputmail[-10:] != '@yahoo.com':
            raise forms.ValidationError('email extension should be either gmail or yahoo')
        return inputmail

views.py
-------------
from django.shortcuts import render
from testapp.forms import FeedBackForm
# Create your views here.
def feedback_view(request):
    form = FeedBackForm()
    submitted = False
    name = ""
    if request.method == 'POST':
        form = FeedBackForm(request.POST)
        if form.is_valid():
            print("Form validation and print feedback information")
            print("*"*50)
            print("Name:",form.cleaned_data['name'])
            print("Rollno:",form.cleaned_data['rollno'])
            print("Mail ID:",form.cleaned_data['email'])
            print("Feedback:",form.cleaned_data['feedback'])
            submitted = True
            name = form.cleaned_data['name']
        else:
            print("Some field validation fails")
    return render(request,'testapp/feedback.html',{'form':form,'submitted':submitted,'name':name})

-->If we want to validate multiple field values together, then single clean() method is the best choice.

How to check original pwd and re-entered pwd are same or not:
----------------------------------------------------------------------------------------------
from django import forms
class FeedBackForm(forms.Form):
    name = forms.CharField()
    rollno = forms.IntegerField()
    email = forms.EmailField()
    password = forms.CharField(label='Enter Password',widget=forms.PasswordInput)
    rpassword=forms.CharField(label='Password(Again)',widget=forms.PasswordInput)
    feedback=forms.CharField(widget=forms.Textarea)

    def clean(self):
        total_cleaned_data = super().clean()
        pwd = total_cleaned_data['password']
        rpwd = total_cleaned_data['rpassword']
        if pwd != rpwd:
            raise forms.ValidationError("Both passwords mut be same....")

How to prevent request from BOT:
---------------------------------------------------
-->Generally form requests can be send by end user. Sometimes we can write automated programming script which is responsible to fill the form and submit. This automated programming script is nothing but BOT.

The main objectives of BOT requests are:
	1).To create unneccessary heavy traffic to the website, which may crash our application.
	2).To spread malware(viruses)
-->Being a developer compulsory we have to think about BOT requests and we have to prevent these requests.

How to prevent BOT Requests:
----------------------------------------------
-->In the form we will place one hidden field, which is not visible to the end user, Hence there is no chance of providing value to this hidden field.
-->But BOT will send the value for this hidden field also. If hidden field got some value means it is the request from BOT and prevent that submission.

forms.py
-------------
class FeedBackForm(forms.Form):
    All fields
    bot_handler=forms.CharField(required=False,widget=forms.HiddenInput)

	def clean(self):
		total_cleaned_data = super().clean()
		bot_handler_value=total_cleaned_data['bot_handler']
        if len(bot_handler_value)>=0:
            raise forms.ValidationError("Request from BOT....can't be submitted")
Note:
	Otherway to prevent BOT requests
	1).By using captchas
	2).By using image recognizers
	(like choose 4 images where car present)
		
											Chapter-6
											=========
											Working with
											Model Forms

Model Form--->Model based form

Read each field value
name = form.cleaned_data['name']
marks = form.cleaned_data['marks']
records = Student.get_or_create(name=name,marks=marks)

10 fields are there
100 fields

Model based form
only one line
form.save()

-->Sometimes we can create form based on Model, such type of forms are called as Model Based Forms or Model Forms.

-->The main advantage of model forms is we can grab and end user input data and we can save that data very easily in the database.
				form.save()
				form.save(commit=True)

-->Django provides inbuilt support to develop Model based forms very easily.

How to develop model based forms:
-----------------------------------------------------
1).While developing form class, we have to inherit from forms.ModelForm class instead of froms.Form class.
	class RegistrationForm(forms.Form)--->Normal Form
	class RegistrationForm(forms.ModelForm)--->Model Form

2).
	class RegistrationForm(forms.ModelForm):
		class Meta:
			model = Student
			fields = '__all__'
		
Case-1:Instead of all fileds, if we required particular fields.
	class RegistrationForm(forms.ModelForm):
		class Meta:
			model = Student
			fields = ('field1','field2','filed3')

Case-2:Instead of all fileds, if we want to exclude certain fields
	class RegistrationForm(forms.ModelForm):
		class Meta:
			model = Student
			exclude = ['field1','field2']

How to save user's data to database in model based form:
--------------------------------------------------------------------------------------
def student_view(request):
	if request.method == 'POST':
		form = StudentForm(request.POST)
		if form.is_valid():
			form.save()

Note:
	class RegisterForm(forms.ModelForm):
		field declaratios for validation
		class Meta:
			model = Student
			fields = '__all__'

Ex:ModelFormProject
--------------------------------
Create project:
	django-admin startproject ModelFormProject
Create app:
	py manage.py startapp testapp

models.py
----------------
from django.db import models
# Create your models here.
class Student(models.Model):
    name = models.CharField(max_length=30)
    marks = models.IntegerField()

py manage.py makemigrations
py manage.py migrate

admin.py
-------------
from django.contrib import admin
from testapp.models import Student
# Register your models here.
class StudentAdmin(admin.ModelAdmin):
    list_display = ['name','marks']
admin.site.register(Student,StudentAdmin)

-->Create superuser.
	py manage.py createsuperuser

-->Login to admin interface and check the table.

forms.py
-------------
from django import forms
from testapp.models import Student
class StudentForm(forms.ModelForm):
    name = forms.CharField()
    marks = forms.IntegerField()
    class Meta:
        model = Student
        fields = '__all__'

views.py
------------
from testapp.forms import StudentForm
# Create your views here.
def student_view(request):
    form = StudentForm()
    if request.method == 'POST':
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
			print("Record inserted into database successfully.....")
    return render(request,'testapp/studentform.html',{'form':form})

studentform.html
---------------------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="stylesheet" href="{%static 'css/std.css' %}">
  </head>
  <body>
    <div class="container" align='center'>
      <h1>Student Registration Form</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" class="btn btn-warning" name="" value="Register">
      </form>
    </div>
  </body>
</html>

urls.py
---------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('register/', views.student_view),
]
std.css
-----------
body{
  background: yellow;
  color:red;
}
h1{
  text-align: center;
}

-->Start server send request.

movie project:
----------------------
-->django-admin startproject movieproject
-->movieproject>py manage.py startapp testapp

models.py
---------------
class Movie(models.Model):
    rdate = models.DateField()
    moviename = models.CharField(max_length=20)
    hero = models.CharField(max_length=20)
    heroine = models.CharField(max_length=20)
    rating = models.IntegerField()

-->py manage.py makemigrations
-->py manage.py migrate

admin.py
--------------
from testapp.models import Movie
# Register your models here.
class MovieAdmin(admin.ModelAdmin):
    list_display = ['rdate','moviename','hero','heroine','rating']
admin.site.register(Movie.MovieAdmin)

-->Create superuser.

views.py
------------
from django.shortcuts import render
def index_view(request):
    return render(request,'testapp/index.html')

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index_view),
]

index.html
-----------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/movie.css' %}">

  </head>
  <body>
    <div class="container" align='center'>
      <h1>Mahesh Movies......</h1>
      <p>Upto date movies information</p>
      <a href="#" class="btn btn-primary" role="button">ADD</a>
      <a href="#" class="btn btn-primary" role="button">List Movies</a>
    </div>
  </body>
</html>

movie.css
---------------
body{
  background: yellow;
  color:red;
}

views.py
-------------
from testapp.models import Movie
def list_movies_view(request):
    movies_list = Movie.objects.all()
    return render(request,'testapp/listmovies.html',{'movies_list':movies_list})

listmovies.html
-----------------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/movie.css' %}">
  </head>
  <body>
    {% if movies_list %}
    <h1>Movies List</h1>
    <table>
      <thead>
        <th>Release Date</th>
        <th>Movie Name</th>
        <th>Hero</th>
        <th>Heroine</th>
        <th>Rating</th>
      </thead>
      {% for movie in movies_list %}
      <tr>
        <td>{{movie.rdate}}</td>
        <td>{{movie.moviename}}</td>
        <td>{{movie.hero}}</td>
        <td>{{movie.heroine}}</td>
        <td>{{movie.rating}}</td>
      </tr>
      {% endfor %}
    </table>
    {% else %}
    <h1>No Movies Found</h1>
    {% endif %}
  </body>
</html>

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index_view),
    path('movielist', views.list_movies_view)
]

index.html
-----------------
<a href="/movielist" class="btn btn-primary" role="button">List Movies</a>

forms.py
-------------
from django import forms
from testapp.models import Movie
class MovieForm(forms.ModelForm):
    class Meta:
        model = Movie
        fields = '__all__'

views.py:
--------------
from testapp.forms import MovieForm
def add_movie_view(request):
    form = MovieForm()
    if request.method == 'POST':
        form = MovieForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
		return index_view(request)
    return render(request,'testapp/addmovie.html',{'form':form})

addmovie.html
----------------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/movie.css' %}">
  </head>
  <body>
    <div class="container" align='center'>
      <h1>Add Movie Information</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" class="btn btn-primary" name="" value="Add Movie">
      </form>
    </div>
  </body>
</html>

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index_view),
    path('movielist', views.list_movies_view),
    path('addmovie', views.add_movie_view)
]

index.html
-----------------
<a href="/addmovie" class="btn btn-primary" role="button">ADD</a>

											Chapter-7
											=========
									Working with Advanced
										Template Features
									=====================
Advanced Templates:
-------------------------------
1).Template Inheritance
2).Template Filters

1).Template Inheritance:
-------------------------------------
-->If multiple template files have same common code, it is not recommended to write that common code in every template html file. It increases length of the code and reduces readability. It is also increases development time.
-->We have to separate that common code into a new template file, which is also known as base template. The remaining template files should required to extend base templaes so that the common code will be inherited automatically.
-->Inheriting common code from base template to remaining templates is nothing but template inheritance.

How to implement template inheritance:
------------------------------------------------------------
base.html
--------------
  <body>
		   common code required for every child template
    {% block child_block %}
		Anything outside of this block available to child tag.
		In child template the specific code should be in this block.
    {% endblock %}
  </body>

child.html
----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{%block child_block %}
  Child specific extra code
{% endblock %}

How to add separate CSS files to child Templates?
---------------------------------------------------------------------------
Ex:
------
D:\Django_10AM_Projects>django-admin startproject advtemplateproject

D:\Django_10AM_Projects>cd advtemplateproject

D:\Django_10AM_Projects\advtemplateproject>py manage.py startapp testapp

base.html
---------------
<!DOCTYPE html>
{% load static %}
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="stylesheet" href="{%static 'css/advt.css' %}">
  </head>
  <body>
    <nav class="navbar">
      <a class="navbar" href="/">Mahesh News</a>
      <div class="container">
        <ul class="navbar-nav">
          <li><a class="navbar" href="movie/">Movies</a></li>
          <li><a class="navbar" href="sports/">Sports</a></li>
          <li><a class="navbar" href="politics/">Politics</a></li>
        </ul>
      </div>
    </nav>
		{%block body_block%}
		{%endblock%}
  </body>
</html>

views.py
-------------
def base_view(request):
    return render(request,'testapp/base.html')
def movie_view(request):
    return render(request,'testapp/movie.html')
def sports_view(request):
    return render(request,'testapp/sports.html')
def politics_view(request):
    return render(request,'testapp/politics.html')

urls.py
----------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.base_view),
	path('movie/', views.movie_view),
    path('sports/', views.sports_view),
    path('politics/', views.politics_view),
]

movie.html
------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{%load static%}
{%block body_block%}
<h1>This is movies information</h1>
{%endblock%}

sports.html
-----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{%load static%}
{%block body_block%}
<h1>This is sports information</h1>
{%endblock%}

politics.html
-------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{%load static%}
{%block body_block%}
<h1>This is politics information</h1>
{%endblock%}

advt.css
-------------
h1{
  color:red;
  text-align: center;
}
.navbar{
  background: yellow;
}
.navbar.a{
  color: blue:
}
li a{
  color:red;
}

Note:
--------
1).In the parent template, we can define any number of blocks. But child template is responsible to implement these blocks.
2).It is not mandatory to implement every parent block in child. Based on our requirement, child template can decide which blocks are required to implement.
3).While implementing blocks in child template, it is not required to follow order.
4).Child template can extend any number of parent templates. i.e multiple inheritance is allowed.

Advantages of Template Inheritance:
-------------------------------------------------------
1).What ever code available in base template is bydefault available to child templates and we are not required to write again. Hence it promotes code re-usability.
2).It reduces length of the code and improves readability.
3).It reduce development time.
4).It provides unique and same look and feel for total web application.

2).Template Filters:
=================
-->In the template file, the injected data can be displayed by using template tags.
	{{name}}				{{emp.eno}}

-->Before displaying to the end user, if we want to perform some modifications to the injected text, like add something or cut something, case conversions etc then we should go for filter.

Syntax for Template Filter:
-----------------------------------------
{{ value | filtername }}
{{ value | filtername:"argument" }}
-->Arguments to the filter are optional.

Ex:
-----
D:\Django_10AM_Projects>django-admin startproject filterproject
D:\Django_10AM_Projects>cd filterproject
D:\Django_10AM_Projects\filterproject>py manage.py startapp testapp

models.py
---------------
from django.db import models
class FilterModel(models.Model):
    name = models.CharField(max_length=20)
    subject = models.CharField(max_length=20)
    dept = models.CharField(max_length=20)
    sate = models.DateField()

D:\Django_10AM_Projects\filterproject>py manage.py makemigrations
D:\Django_10AM_Projects\filterproject>py manage.py migrate

admin.py
-------------
from testapp.models import FilterModel
class FilterModelAdmin(admin.ModelAdmin):
    list_display = ['name','subject','dept','date']
admin.site.register(FilterModel,FilterModelAdmin)

-->Create superuser.
D:\Django_10AM_Projects\filterproject>py manage.py createsuperuser

-->Start server.
	D:\Django_10AM_Projects\filterproject>py manage.py runserver

-->Login to admin interface.
		Add data to tables manually.

views.py
------------
from testapp.models import FilterModel
def upper_data_view(request):
    records = FilterModel.objects.all()
    return render(request,'testapp/upperdata.html',{'records':records})

upperdata.html
------------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    {% for record in records %}
	<h1>{{record.name}} Information</h1>
    <ul>
      <li>Name:{{record.name}}</li>
      <li>Subject:{{record.subject}}</li>
      <li>Dept:{{record.dept}}</li>
      <li>Date:{{record.date}}</li>
    </ul><hr>
    {% endfor %}
  </body>
</html>

urls.py
---------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('upperview/', views.upper_data_view),
]

fp.css
---------
li{
  font-size:20px;
}
body{
  background: red;
  color:white;
}

filters:
----------
<ul>
      <li>Name:{{record.name | upper}}</li>
      <li>Subject:{{record.subject | lower}}</li>
      <li>Dept:{{record.dept | title}}</li>
      <li>Date:{{record.date}}</li>
</ul><hr>

<li>Date:{{record.date | date:"d-m-Y"}}</li>
<li>Date:{{record.date | date:"m-d-Y"}}</li>
<li>Date:{{record.date | date:"m/d/Y"}}</li>
<li>Date:{{record.date | timesince}}</li>
<li>Date:{{record.date | date:"d-b-Y"}}</li>
<li>Date:{{record.date | date:"l, F j, Y"}}</li>

How to create our own filters:
--------------------------------------------
-->Based on our requirement, we can create own filters, if predefined filters are not fullfill our requirement.

Steps:
---------
1).Create a folder 'templatetags' inside our application folder.
2).Create a special file named with '__init__.py' inside this folder(templatetags), so that django will consider this folder as python package.
3).Create a python file inside this folder to define our filters cust_filters.py

cust_filters.py
---------------------
from django import template
register = template.Library()

def first_five_upper(value):
    result = value[:5].upper()
    return result

def first_n_upper(value,n):
    result = value[:n].upper()
    return result

register.filter('ffu',first_five_upper)
register.filter('fnu',first_n_upper)

html file:
--------------
<body>
    {% load cust_filters %}
    {% for record in records %}
    <h1>{{record.name}} Information</h1>
    <ul>
      <li>Name:{{record.name | fnu:5}}</li>
      <li>Subject:{{record.subject | lower}}</li>
      <li>Dept:{{record.dept | title}}</li>
      <li>Date:{{record.date | date:"l, F j, Y"}}</li>
    </ul><hr>
    {% endfor %}
  </body>
												CHAPTER-8
												==========
											Session Management
											==================
-->Client and server can communicate with some common langauge which is nothing but HTTP.

-->The basic limitation of HTTP is it is stateless protocol. i.e it is unable to remember client information for future purpose across multiple requests. Every request to the server is treated as new request only.

-->To remember client information at server side, some special mechanism must be required which is nothning but session management mechanism.

-->Different session management mechanisms are:
			1).Cookies
			2).Session API

Session management by using cookies:
-----------------------------------------------------------
RMP Doctors example:
Cockies is a very small amount of information created by server and maintained by client. Cookies are key-value pairs.

To add coockies to the response.
	response.set_cookie(cname,cvalue)

To get cookies send by client:
	request.COOKIES[cname]
	request.COOKIES.get(cname)
	request.COOKIES.get(cname,defaultvalue)

Page Count Application:
--------------------------------------
D:\Django_17Mar_11AM>django-admin startproject pagecountproject
D:\Django_17Mar_11AM>cd pagecountproject
D:\Django_17Mar_11AM\pagecountproject>py manage.py startapp testapp
D:\Django_17Mar_11AM\pagecountproject>py manage.py makemigrations
D:\Django_17Mar_11AM\pagecountproject>py manage.py migrate

views.py
------------
def page_count_view(request):
    print("Cookies from the client:",request.COOKIES)
    count = int(request.COOKIES.get('count',0))
    count = count+1
    response = render(request,'testapp/counter.html', {'count':count})
    response.set_cookie('count',count)
    return response

Ex:
------
d = {101:"sunny"}
d.get(101) #'sunny'
d.get(102) #None
d.get(102,"bunny") #'bunny'

counter.html
--------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <style >
      span{
        font-size:150px;
        font-weight:600;
        color:red;
      }
    </style>
  </head>
  <body>
    <h1>The Page Count:<span>{{count}}</span></h1>
  </body>
</html>

urls.py
---------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('page/', views.page_count_view),
]

Client is sending the first request:
---------------------------------------------------
-->What information required for future purpose, server will decide, with that information, server will create cookie and it should be handover to the client.
Response will be send to the client.
-->Server will add cookie to the response then automatically cookies will be reached to the client.

cookies-->per server and per browser.
from chrome-->Facebook and gmail

sessionproject2:
------------------------
D:\Django_17Mar_11AM>django-admin startproject sessionproject2
D:\Django_17Mar_11AM>cd sessionproject2
D:\Django_17Mar_11AM\sessionproject2>py manage.py startapp testapp

D:\Django_17Mar_11AM\sessionproject2>py manage.py makemigrations
No changes detected
D:\Django_17Mar_11AM\sessionproject2>py manage.py migrate

forms.py
-------------
from django import forms
class LoginForm(forms.Form):
    name = forms.CharField()

views.py
------------
from testapp.forms import LoginForm
# Create your views here.
def home_view(request):
    form = LoginForm()
    return render(request,'testapp/home.html',{'form':form})

home.html
------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Welcome To Naresh IT</h1>
    <form action="">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" name="" value="Enter Name">
    </form>
  </body>
</html>
	
urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('home/', views.home_view),
]

views.py
------------
def date_time(request):
    name = request.GET['name']
    response = render(request,'testapp/datetime.html',{'name':name})
    response.set_cookie('name',name)
    return response

datetime.html
---------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Hello {{name}}</h1>
    <a href="/results">Click Here To Get The Date and Time</a>
  </body>
</html>

urls.py
---------
path('second/', views.date_time),

views.py
------------
def result_view(request):
    name = request.COOKIES.get('name')
    date_time = datetime.datetime.now()
    return render(request,'testapp/results.html',{'name':name,'date_time':date_time})

results.html
-------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Hello {{name}}</h1><hr>
    <h1>Current Date and Time:{{date_time}}</h1>
    <a href="/results">Click here to updated time</a>
  </body>
</html>

urls.py
---------
path('results/', views.result_view),

datetime.html, results.html
-------------------------------------------
<a href="/results">Click Here To Get The Date and Time</a>
<a href="/results">Click here to updated time</a>

Flow:
--------
http://127.0.0.1:8000/home
-->home.html will be displayed.
-->If we sbmit then request will go to the url-pattern:/second which is associated with views.result_view
-->This view function sends datetime.html as response and in that response name cookie added for the future purpose.

Session Project-3
===============
D:\Django_17Mar_11AM>django-admin startproject sessionproject3
D:\Django_17Mar_11AM>cd sessionproject3
D:\Django_17Mar_11AM\sessionproject3>py manage.py startapp testapp

-->Add app in settings.py

D:\Django_17Mar_11AM\sessionproject3>py manage.py makemigrations
No changes detected
D:\Django_17Mar_11AM\sessionproject3>py manage.py migrate

views.py
-------------
from django.shortcuts import render
# Create your views here.
def home_view(request):
    return render(request,'testapp/home.html')

home.html
-----------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Welcome To NARESH IT</h1>
    <form action="">
      Enter Name:<input type="text" name="name" value=""><br><br>
      <input type="submit" name="" value="Submit Name">
    </form>
  </body>
</html>

urls.py
----------
path('home/', views.home_view),

views.py
-----------
def age_view(request):
    print(request.COOKIES)
    username = request.GET['name']
    response = render(request,'testapp/age.html',{'name':username})
    response.set_cookie('name',username)
    return response

age.html
--------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Hello {{name}}</h1>
    <form action="/gf">
    Enter Age:<input type="text" name="age" value=""><br><br>
    <input type="submit" name="" value="Submit Age">
    </form>
  </body>
</html>

urls.py
----------
path('age/', views.age_view),

views.py
------------
def gf_view(request):
    print(request.COOKIES)
    username = request.COOKIES['name']
    age = request.GET['age']
    response = render(request,'testapp/gf.html',{'name':username})
    response.set_cookie('age',age)
    return response

gf.html
------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Hell {{name}}</h1>
    <form action="" >
    Enter GF Name:<input type="text" name="gf" value=""><br><br>
    <input type="submit" name="" value="Submit GF Name">
    </form>
  </body>
</html>

urls.py
----------
path('gf/', views.gf_view),

views.py
-------------
def result_view(request):
    print(request.COOKIES)
    username = request.COOKIES['name']
    age = request.COOKIES['age']
    gfname = request.GET['gf']
    response = render(request,'testapp/results.html',{'name':username,'age':age,'gf':gfname})
    return response

results.html
------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Hello {{name}}, thanks for providing information</h1>
    <h2>Plrase cross check your data and confirm</h2>
    <ul>
      <li>Name:{{name}}</li>
      <li>Age:{{age}}</li>
      <li>GF Name:{{gf}}</li>
    </ul>
  </body>
</html>

urls.py
----------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('home/', views.home_view),
    path('age/', views.age_view),
    path('gf/', views.gf_view),
    path('results/', views.result_view),
]

Temporary Vs Permanent cookies:
---------------------------------------------------
If we are not setting any max_age for the cookie, then the cookies will be stored in browser's cache. Once we close the browser, automatically the cookies will be expired. Such type of cookies are called as temporary cookies.

We can create temporary cookies:
		response.set_cookie(name,value)
			
If we are setting max_age for the cookies, then cookies will be stored in local file system permanently. Once the specified max_age expired then only cookies will be expired---->Permanent cookies or persistent cookies.

We can create permanent cookies.
		response.set_cookie(name,value,120)

max_age =	3*30*24*60*60
3-months

views.py
--------------
response.set_cookie('age',age,120)

sessionproject-4:
------------------------
D:\Django_17Mar_11AM>django-admin startproject sessionproject4
D:\Django_17Mar_11AM\sessionproject4>py manage.py startapp testapp
D:\Django_17Mar_11AM\sessionproject4>

-->Add app in settings.py

-->makemigrations & migrate.

views.py
------------
def index_view(request):
    return render(request,'testapp/home.html')

home.html
-----------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      <div class="jumbotron" align="center">
        <h1>MAHESH ONLINE SHOPPING APP</h1>
        <a class="btn btn-primary" href="#" role="button">Add Item</a>
        <a class="btn btn-primary" href="#" role="button">Display Items</a>
      </div>

    </div>
  </body>
</html>

urls.py
------------
path('', views.index_view),

forms.py
------------
from django import forms
class AddItemForm(forms.Form):
    itemname = forms.CharField()
    quanity = forms.IntegerField()

views.py
------------
def additem_view(request):
    form = AddItemForm()
    respone = render(request,'testapp/additem.html',{'form':form})
    if request.method == 'POST':
        form = AddItemForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data['itemname']
            quantity = form.cleaned_data['quanity']
            respone.set_cookie(name,quantity)
    return respone

additem.html
--------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container" align="center">
      <h1>Add Item Form</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" name="" value="Add Item">
      </form>

    </div>
  </body>
</html>

views.py
------------
def display_items_view(request):
    return render(request,'testapp/displayitems.html')

displayitems.html
----------------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Shopping Cart Items</h1>
    {% if request.COOKIES %}
    <table border="3">
      <thead>
        <th>Item Name</th>
        <th>Quantity</th>
      </thead>
      {% for key,value in request.COOKIES.items %}
      {% if key != 'csrftoken' %}
      <tr>
        <td>{{key}}</td>
        <td>{{value}}</td>
      </tr>
      {% endif %}
      {% endfor %}
    </table>
    {% else %}
    <p>No items in the shopping cart</p>
    {% endif %}
  </body>
</html>

urls.py
----------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index_view),
    path('additem/', views.additem_view),
    path('display/', views.display_items_view),

]

Limitations of Coockies:
------------------------------------
1).By using coockies we can store very less amount of information. The size of cookies is fixed. Hence if we want to store huge amount of information then cookies in not best choice.
2).Cookies can hold only string information. If we want to store non-string objects we cannot use cookies.
3).Cookies information is stored on client side and hence there is no security.
4).Every time with every request, browser will send all cookies related to that application, which creates network traffic problems.
5).There is a limit on max number of cookies supported by browser.

To overcome these limitations, we should go for Session Framework.

Django provides in-built support for session api.

INSTALLED_APPS = [
       'django.contrib.sessions',
    ]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
]

Session Management by using session API(Django Session Framework)
---------------------------------------------------------------------------------------------------------
Cookies-->RMP Doctor
Session Framework-->Bank Locker Example | Temple Chappal Stand | Super Speciality Hospitals

Useful methods for session management:
--------------------------------------------------------------
1).To add data to the session
		request.session['key']=value

2).To get the data from the session
		value = request.session['key']

3).request.session.set_expiry(seconds)
	set expiry time for the session.

4).request.session.get_expiry_age()
	Returns expiry age in seconds(The number of seconds until this session expires)

5).request.session.get_expiry_date()
	Returns the date on which session will be expired.

Session Project-5:
---------------------------
D:\Django_17Mar_11AM>django-admin startproject sessionproject5
D:\Django_17Mar_11AM>cd sessionproject5
D:\Django_17Mar_11AM\sessionproject5>py manage.py startapp testapp

-->Add app in settings.py
-->Makemigrations & migrate.

views.py
-------------
def page_count_view(request):
    print(request.COOKIES)
    count = request.session.get('count',0)
    count = count + 1
    request.session['count'] = count
    request.session.set_expiry(120)
    print(request.session.get_expiry_age())
    print(request.session.get_expiry_date())
    return render(request,'testapp/pagecount.html',{'count':count})

pagecount.html
-----------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <style >
      span{
        font-size:300px;
      }
    </style>
  </head>
  <body>
    <h1>The page count:<span>{{count}}</span></h1>
  </body>
</html>

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('count/', views.page_count_view),
]

Observation:
	1).request.session.set_expiry(120)
	2).request.session.set_expiry(0)-->Once we close the browser automatically sesiion will be expired.

Session Project-6:
--------------------------
Profile Application:
----------------------------
Name:
Age:
GF:
Please check your complete info

D:\Django_17Mar_11AM>django-admin startproject sessionproject6
D:\Django_17Mar_11AM>cd sessionproject6
D:\Django_17Mar_11AM\sessionproject6>py manage.py startapp testapp

-->Add app in settings.py
-->Makemigrations & migrate.

views.py
------------
from testapp.forms import NameForm
# Create your views here.
def name_view(request):
    form = NameForm()
    return render(request,'testapp/name.html',{'form':form})

forms.py
------------
from django import forms
class NameForm(forms.Form):
    name = forms.CharField()

name.html
-----------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Name Registration Form</h1>
    <form action="">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" name="" value="Submit Name">
    </form>
  </body>
</html>

urls.py
---------
path('name/', views.name_view),

views.py
-------------
def age_view(request):
    name = request.GET['name']
    request.session['name'] = name
    form = AgeForm()
    return render(request,'testapp/age.html',{'form':form,'name':name})

age.html
-------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Hello {{name}},Provide Age</h1>
    <form action="">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" name="" value="Submit Age">
    </form>
  </body>
</html>

urls.py
---------
path('age/', views.age_view),

name.html
----------------
<form action="/age">

views.py
-------------
def gf_view(request):
    age = request.GET['age']
    request.session['age'] = age
    name = request.session['name']
    form = GfForm()
    return render(request,'testapp/gf.html',{'form':form,'name':name})

gf.html
-----------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Hello {{name}},Provide Girl Frined Name</h1>
    <form action="">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" name="" value="Submit GF Name">
    </form>
  </body>
</html>

urls.py
----------
path('gf/', views.gf_view),

forms.py
------------
from django import forms
class NameForm(forms.Form):
    name = forms.CharField()
class AgeForm(forms.Form):
    age = forms.IntegerField()
class GfForm(forms.Form):
    gf = forms.CharField()

views.py
-------------
def results_view(request):
    gf = request.GET['gf']
    request.session['gf'] = gf
    name = request.session['name']
    age = request.session['age']
    return render(request,'testapp/results.html')

results.html
-----------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    {% if request.session %}
    <h1>Thanks for providing information...please confirm once</h1>
    <ul>
      {% for key,value in request.session.items %}
      <li>{{key | upper}}:{{value | title}}</li>
      {% endfor %}
    </ul>
    {% else %}
    <h1>No information available</h1>
    {% endif %}
  </body>
</html>

urls.py
-----------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('name/', views.name_view),
    path('age/', views.age_view),
    path('gf/', views.gf_view),
    path('results/', views.results_view),
]

Cart Application with Session API:
---------------------------------------------------
D:\Django_17Mar_11AM>django-admin startproject sessionproject7
D:\Django_17Mar_11AM>cd sessionproject7
D:\Django_17Mar_11AM\sessionproject7>py manage.py startapp testapp
D:\Django_17Mar_11AM\sessionproject7>py manage.py makemigrations
No changes detected
D:\Django_17Mar_11AM\sessionproject7>py manage.py migrate

forms.py
--------------
from django import forms
class AddItemForm(forms.Form):
    name = forms.CharField()
    quantity = forms.IntegerField()

views.py
------------
from django.shortcuts import render
from testapp.forms import AddItemForm
# Create your views here.
def add_item_view(request):
    form = AddItemForm()
    return render(request,'testapp/additem.html',{'form':form})

additem.html
---------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container" align="center">
    <h1>Add Item Form</h1>
    <form method="post">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" name="" value="Add Item">
    </form>
    <br><br>
    <a class="btn btn-primary btn-lg" href="#" role="button">Display Items</a>
    </div>
  </body>
</html>

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('add/', views.add_item_view),
]

views.py
------------
from django.shortcuts import render
from testapp.forms import AddItemForm
# Create your views here.
def add_item_view(request):
    form = AddItemForm()
    if request.method == 'POST':
        name = request.POST['name']
        quantity = request.POST['quantity']
        request.session[name] = quantity
    return render(request,'testapp/additem.html',{'form':form})
    
def display_items_view(request):
    return render(request,'testapp/displayitems.html')

displayitems.html
---------------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>The Cart Items</h1>
    {% if request.session %}
    <table border="2">
      <thead>
        <th>Item Name</th>
        <th>Quantity</th>
      </thead>
      {% for key,value in request.session.items %}
      <tr>
        <td>{{key}}</td>
        <td>{{value}}</td>
      </tr>
      {% endfor %}
    </table>
    {% else %}
    <p>No items in your shopping cart</p>
    {% endif %}
  </body>
</html>

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('add/', views.add_item_view),
    path('display/', views.display_items_view),
]

											CHAPTER-9
											==========
									User Authentication
												and 
										Authorization
									====================
1).Authentication:The process of validating user.
2).Authorization:The process of validating access permission of a user.

login page
username and password--->should be stored for future purpose
validation must be required

auth application
------------------------
1).django.contrib.auth
2).django.contrib.contenttypes

Demo application for authentication:
-------------------------------------------------------
base.html
---------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" href="#">MAHESHEXAMS</a>
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/java">Java Exams</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/python">Python Exams</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/aptitude">Aptitude Exams</a>
          </li>
        </ul>
        <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link" href="#">Signup</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Login</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Logout</a>
          </li>
          </ul>
      </div>
    </nav>
      {% block body_block%}
      {% endblock %}
  </body>
</html>

home.html
----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
  {% block body_block %}
  <div class="jumbtron">
    <div class="container">
    <h1>Welcome To MAHESH EXAMS</h1>
    <h2>Rules:</h2>
    <ul>
      <li>Rule-1:You should write only one exam per day</li>
      <li>Rule-1:You should write only one exam per day</li>
      <li>Rule-1:You should write only one exam per day</li>
      <li>Rule-1:You should write only one exam per day</li>
    </ul>
    </div>
  </div>
  {% endblock %}

javaexamms.html
--------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
  {% block body_block %}
  <div class="jumbtron">
    <div class="container" align="center">
    <h1>Welcome to Java Exams</h1>
    </div>
  </div>
  {% endblock %}

pythonexams.html
----------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
  {% block body_block %}
  <div class="jumbtron">
    <div class="container" align="center">
    <h1>Welcome to Python Exams</h1>
    </div>
  </div>
  {% endblock %}

aptitudeexams.html
------------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
  {% block body_block %}
  <div class="jumbtron">
    <div class="container" align="center">
    <h1>Welcome to Python Exams</h1>
    </div>
  </div>
  {% endblock %}

views.py
------------
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
# Create your views here.
def home_page_view(request):
    return render(request,'testapp/home.html')

@login_required
def java_page_view(request):
    return render(request,'testapp/javaexams.html')

def python_page_view(request):
    return render(request,'testapp/pythonexams.html')

def aptitude_page_view(request):
    return render(request,'testapp/aptitudeexams.html')

urls.py
---------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.home_page_view),
    path('java/', views.java_page_view),
    path('python/', views.python_page_view),
    path('aptitude/', views.aptitude_page_view),
]

auth application will use one table:user
Create superuser and go to admin interface then add user.

Problem-1:
---------------
Page not found (404)
Request Method:	GET
Request URL:	http://127.0.0.1:8000/accounts/login/?next=/java/

Solved this problem by including auth application url

urls.py
----------
path('accounts/', include('django.contrib.auth.urls')),

Problem-2:
-----------------
TemplateDoesNotExist at /accounts/login/
registration/login.html
Request Method:	GET
Request URL:	http://127.0.0.1:8000/accounts/login/?next=/java/
Django Version:	4.1
Exception Type:	TemplateDoesNotExist
Exception Value:	
registration/login.html

-->Create a folder under templates with the name registration and create a file login.html

login.html
---------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
  {% block body_block %}
  <div class="jumbtron">
    <div class="container" align="center">
    <h1>Please Login To Write Exams......</h1>
    <form method="post">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" name="" value="Login">
    </form>
    </div>
  </div>
  {% endblock %}

Implementing login functionality:
---------------------------------------------------
Note:
	login page url pattern from auth application:/accounts/login

Request URL:	http://127.0.0.1:8000/accounts/login/?next=/java/

If we click login button, after login the next page is profile page bydefault. 
If we want to configure our own destination page, we have to write a line in settings.py

				LOGIN_REDIRECT_URL='/'

Step-1:Update login link with the url pattern: /accounts/login
		<a class="nav-link" href="/accounts/login">Login</a>

Step-2:Configure destination page inside settings.py
		LOGIN_REDIRECT_URL='/'

-->After getting homepage then we access all pages without login.

Implementing logout functionality:
------------------------------------------------------
Step-1:Update logout link with the url pattern: /accounts/logout
			<a class="nav-link" href="/accounts/logout">Logout</a>

Step-2:The default destination page for logout is admin logout page
		We can configure our own logout destination page
			LOGOUT_REDIRECT_URL='/'
		Here logout destination page:hom epage(/)

Defining separate logout destination page:
---------------------------------------------------------------
logout.html
------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
  {% block body_block %}
  <div class="jumbtron">
    <div class="container">
    <h1>Thanks for using MAHESHEXAMS</h1>
    <p>Anyway we are feeling very sad b'z you logout, atleast 24 hrs per day you have to use our app</p>
    <h2>Please login agian to enjoy......</h2>
    <a href="/accounts/login" class="btn btn-success">Login</a>
    </div>
  </div>
  {% endblock %}

views.py
-----------
def logout_view(request):
    return render(request,'testapp/logout.html')

urls.py
---------
path('logout/', views.logout_view),

settings.py
----------------
LOGOUT_REDIRECT_URL='/logout'

Implementing signup button functionality:
----------------------------------------------------------------
-->auth application having form class to provide login form.
-->But auth application doesnot conatin any form class for signup functionality.
-->If a user signup, compulsory that information should be stored in database(user table)

-->Display form to signup and that information should be stored inside database directly. For such type of requirement is highly recommedned to go for model based form.

forms.py
-------------
from django import forms
from django.contrib.auth.models import User
class SignUpForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['username','password','email','first_name','last_name']

views.py
------------
from testapp.forms import SignUpForm
def signup_view(request):
    form = SignUpForm()
    return render(request,'testapp/signup.html',{'form':form})
		
signup.html
------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
  {% block body_block %}
  <div class="jumbtron">
    <div class="container" >
    <h1>Please Signup To Write Exams......</h1>
    <form method="post">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" name="" value="SignUp">
    </form>
    </div>
  </div>
  {% endblock %}

urls.py
---------
path('signup/', views.signup_view),

base.html
--------------
<a class="nav-link" href="/signup">Signup</a>

views.py
------------
from testapp.forms import SignUpForm
from django.http import HttpResponseRedirect
def signup_view(request):
    form = SignUpForm()
    if request.method == 'POST':
        form = SignUpForm(request.POST)
		form.save()
        #user = form.save()
        #user.set_password(user.password)#to hash password
        #user.save()
        return HttpResponseRedirect('/accounts/login')
    return render(request,'testapp/signup.html',{'form':form})

-->In django auth application, user model, the password should not be saved directly. It should be hashed by using some security algorithm. The default password hashing algorith:pbkdf2_sha256

form.save():We are trying to save password in the plain text form.
				  Invalid password format or unknown hashing algorithm.

password hashers:
---------------------------
The default password hasher:pbkdf2_sha256
We can use other more secured password hashers also 
like argon2, bcrypt etc....

pip install bcrypt
pip install django[argon2]

More secured algorithm is argon2 followed by bcrypt and then pbkdf2_sha256.
In settings.py, we have to configure password hashers as follows.

PASSWORD_HASHERS = [
'django.contrib.auth.hashers.Argon2PasswordHasher',
'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
'django.contrib.auth.hashers.BCryptPasswordHasher',
'django.contrib.auth.hashers.FBKDF2PasswordHasher',
'django.contrib.auth.hashers.FBKDF2SHA1PasswordHasher',
]

The order is important.
First available hasher will be considered from top to bottom.

Extra Things:
--------------------
1).How to create our own login form?
2).Social login?
3).Create signup form in alternative way?

											CHAPTER-10
											===========
			Class Based Views and CRUD Operations by using both CBVs and FBVs

CRUD Operations:
================
FBVS-->Function Based Views
CBCS-->Class Based Views
Django ORM

C-->Create (Insert Operations)
R-->Retrieve/Read	(select query)
U-->Update (update)
D-->Delete (delete)

CURD / CURD

CRUD Operations on FBV's:
-----------------------------------------
-->django-admin startproject fbvcrudproject
-->py manage.py startapp testapp
-->Add app in settings.py

models.py
--------------
models.py
---------------
class Employee(models.Model):
    eno = models.IntegerField()
    ename = models.CharField(max_length=64)
    esal = models.FloatField()
    eaddr = models.CharField(max_length=256)

-->Makemigrations and migrate.

admin.py
--------------
from django.contrib import admin
from testapp.models import Employee
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

-->py manage.py createsuperuser

populate_employee.py
---------------------------------
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','fbvcrudproject.settings')
import django
django.setup()
from testapp.models import Employee
from faker import Faker
from random import *
faker = Faker()
def populate(n):
    for i in range(n):
        feno = randint(1001,9999)
        fename = faker.name()
        fesal = randint(10000,20000)
        feaddr = faker.city()
        emp_record=Employee.objects.get_or_create(
        eno=feno,
        ename=fename,
        esal=fesal,
        eaddr=feaddr)
n = int(input("Enter Number Of Employees:"))
populate(n)
print(f'{n} Records Inserted Successfully......')

-->py populate_employee.py

-->Records inserted successfully go and see the table in admin interface.

views.py
------------
from django.shortcuts import render,redirect
from testapp.models import Employee
# Create your views here.
def retrieve_view(request):
    emp_list = Employee.objects.all()
    return render(request,'testapp/index.html',{'emp_list':emp_list})

base.html
---------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <style >
      body{
        background:red;
        color:white;
      }
      a{
        color:yellow;
      }
    </style>
  </head>
  <body>
    <div class="container" align=center>
      {% block body_block %}
      {% endblock %}
    </div>
  </body>
</html>

index.html
-----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}

    <h1>Welcome To Employee List</h1><hr>
    <table border="2">
      <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
        <th>Actions</th>
      </thead>
      {% for emp in emp_list %}
      <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
        <td><a href="/update/{{emp.id}}">Update</a>&nbsp&nbsp&nbsp
		<a href="/delete/{{emp.id}}">Delete</a></td>
      </tr>
      {% endfor %}
    </table>
    <br><br>
    <a href="/insert"class="btn btn-success">Insert New Employee</a>
    {% endblock %}

urls.py
----------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.retrieve_view),
]

forms.py
------------
from django import forms
from testapp.models import Employee
class EmployeeForm(forms.ModelForm):
    class Meta:
        model = Employee
        fields = '__all__'

views.py
-------------
from testapp.forms import EmployeeForm
def insert_view(request):
    form = EmployeeForm()
    return render(request,'testapp/insert.html',{'form':form})

insert.html
----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Employee Insert Form</h1>
<form method="post">
  {{form.as_p}}
  {% csrf_token %}
<input type="submit" class="btn btn-success btn-lg" name="" value="Insert Record">
</form>
{% endblock %}

urls.py
---------
 path('insert/', views.insert_view),

index.html
----------------
 <a href="/insert"class="btn btn-success">Insert New Employee</a>

views.py
------------
from django.shortcuts import render,redirect
from testapp.models import Employee
from testapp.forms import EmployeeForm
def insert_view(request):
    form = EmployeeForm()
    if request.method == 'POST':
        form = EmployeeForm(request.POST)
        if form.is_valid():
            form.save()
        return redirect('/')
    return render(request,'testapp/insert.html',{'form':form})

Steps:
---------
1.Employee Model class
2.makemigrations and migrate
3.register model in the admin interface
4.populate.py script with faker module to generate fake data and insert into database.
5.view function to retrieve data and display by using template file:index.html
6.To insert data:
	form to enter data from the end user
	modelforms
	view function-->Form object creation and send template.

7.delete record:
------------------------
def delete_view(request,id):
    employee = Employee.objects.get(id=id)
    employee.delete()
    return redirect('/')

step-1:
	<a href="/delete/{{emp.id}}">Delete</a></td>
step-2:
	urls.py:
		path('delete/<int:id>', views.delete_view),

8.update operation:
-----------------------------
step-1:
	path('update/<int:id>', views.update_view),
step-2:
	<a href="/update/{{emp.id}}">Update</a>

step-3:
----------
def update_view(request,id):
    employee = Employee.objects.get(id=id)
    form = EmployeeForm(instance =employee)
    return render(request,'testapp/update.html',{'form':form})

update.html
-------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<form method="post">
  {{form.as_p}}
  {%csrf_token%}
  <input type="submit" class="btn btn-success btn-lg" name="" value="Update Record">
</form>
{% endblock %}

step-4:If employee want to update record
--------------------------------------------------------------
def update_view(request,id):
    employee = Employee.objects.get(id=id)
    form = EmployeeForm(instance =employee)
    if request.method == 'POST':
        form = EmployeeForm(request.POST,instance =employee)
        if form.is_valid():
            form.save()
        return redirect('/')
    return render(request,'testapp/update.html',{'form':form})


urls.py
----------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.retrieve_view),
    path('insert/', views.insert_view),
    path('delete/<int:id>', views.delete_view),
    path('update/<int:id>', views.update_view),
]

Types of Views:
-----------------------
1).FBV's
2).CBV's

Class Based View(CBV's):
-------------------------------------
1).FBVs are old where as CBVs are new. CBVs are introduced in Django1.3 version to implement generic views.
2).CBVs are very very easy to use when compared with FBVs. The most commonly used type of views in real time is CBVs.
3).FBVs are more powerful when compare with CBVs. If you are unable to handle with CBVs then only we have to go for FBVs.

CBVs meant for common requirement.
Ex:
	Read data from Employee table-->CBv's
	Complex operation over Employee and Customer tables simultaneously-->FBV's

KFC Images:
	verify small pieces, gravy must be required which should be very less spicy.

-->Every CBV will be converted into FBV internally.
-->CBV is a wrapper over FBV to reduce complexity.

bootstrap(CBV)
css(fbv)
Ex:
	1).KFC is just like CBV and if we are preparing on our own which is something like FBV.
	2).Readymade shirts-->CBV's
		clothes-->Tailor-->Stich based on our requirement-->FBV's

Helloworld application by using CBVs:
---------------------------------------------------------
-->Create a project:django-admin startproject cbvproject
-->Create app:py manage.py startapp testapp
-->Add app in settings.py

views.py
-------------
from django.views.generic import View
from django.http import HttpResponse
class HelloWorldView(View):
    def get(self,request):
        return HttpResponse('<h1>This response is from class based view</h1>')

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.HelloWorldView.as_view()),
]

Note:
--------
1).While defining class based view we have to extend View class.
2).To provide response to GET request Django will alwyas call get() method. Hence we have to override this method in our view class. Similarly other http methods like post(), head(), put(), delete() etc.....
3).While defining url pattern we have to use as_view() method.

Template based application by using class based views:
----------------------------------------------------------------------------------
-->Same cbvproject go to views.py create another class.

views.py
-------------
from django.views.generic import TemplateView
class TemplateCBV(TemplateView):
     template_name = 'testapp/results.html'

results.html
------------------
<body>
    <h1>Hello this response from template based CBV</h1>
</body>

urls.py
---------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.HelloWorldView.as_view()),
    path('tt/', views.TemplateCBV.as_view()),
]

How to send context parameters:
--------------------------------------------------
-->Same cbvproject go to views.py create another class.

views.py
------------
class TemplateCBV2(TemplateView):
    template_name = 'testapp/results2.html'
    def get_context_data(self,**kwargs):
        context = super().get_context_data(**kwargs)
        context['name'] = 'Mahesh'
        context['marks'] = 100
        context['subject'] = 'Python'
        return context

urls.py
----------
path('tt2/', views.TemplateCBV2.as_view()),

results2.html
--------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>
  <body>
    <h1>Student Information</h1>
    <h2>Student Name:{{name}}</h2>
    <h2>Student Marks:{{marks}}</h2>
    <h2>Student Subject:{{subject}}</h2>
  </body>
</html>


Model Related View classes to perform CRUD Operations:
-------------------------------------------------------------------------------------
View
TemplateView

To perform CRUD Operations, predefined view classes are:
		ListView		-->To select all records(R)
		DetailView		-->To get details of a particulr record(R)
		CreateView	-->To insert a record(C)
		DeleteView	-->To delete records(D)
		UpdateView	-->To update records(U)

1).ListView:
	We can use ListView class to list out all records from database table(model).
	It is alternative way to:ModelClassName.objects.all()

default template file name:modelname_list.html  ex:book_list.html
default context object name:modelname_list        ex:book_list

Example for ListView class by using CBVs:
---------------------------------------------------------------
-->Create project:cbvproject2
-->Create application
-->Add app in settings.py

models.py
---------------
from django.db import models
# Create your models here.
class Book(models.Model):
    title = models.CharField(max_length=30)
    author = models.CharField(max_length=30)
    pages = models.IntegerField()
    price = models.FloatField()

-->Makemigrations and migrate.

admin.py
-------------
from django.contrib import admin
from testapp.models import Book
class BookAdmin(admin.ModelAdmin):
    list_display=['title','author','pages','price']
admin.site.register(Book,BookAdmin)

-->Login to admin interface and add some records.

views.py
------------
from django.views.generic import ListView
from testapp.models import Book

# Create your views here.
#def list_view(request):
#    books_list = Book.objects.all()
#    return render(request,'testapp/books.html',{'books_list':books_list})

class BookListView(ListView):
    model = Book
    #default tempalte file: book_list.html
    #default context objecct name : book_list

urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('list/', views.BookListView.as_view()),
]

book_list.html
----------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      <h1>All Books Information</h1>
      {% for book in book_list %}
      <ul>
        <li>Title:<strong>{{book.title}}</strong></li>
        <li>Author:<strong>{{book.author}}</strong></li>
        <li>Pages:<strong>{{book.pages}}</strong></li>
        <li>Price:<strong>{{book.price}}</strong></li>
      </ul>
      <hr>
      {% endfor %}
    </div>
  </body>
</html>

How to configure our own template file:
-----------------------------------------------------------
By using template_name variable we have to specify our own template file.

How to configure our own context object:
--------------------------------------------------------------
We have to use : context_object_name variable.

views.py
-------------
class BookListView(ListView):
    model = Book
    template_name = 'testapp/books.html'
    context_object_name = 'books'

books.html
---------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      <h1>All Books Information from customized template file</h1>
      {% for book in books %}
      <ul>
        <li>Title:<strong>{{book.title}}</strong></li>
        <li>Author:<strong>{{book.author}}</strong></li>
        <li>Pages:<strong>{{book.pages}}</strong></li>
        <li>Price:<strong>{{book.price}}</strong></li>
      </ul>
      <hr>
      {% endfor %}
    </div>
  </body>
</html>

DetailView:
----------------
ListView:To list out all records present in database table.
				Default template_file = book_list.html
				Default context_object_name = book_list

DetailView:To get the details of a particular record
				Default template_file = book_detail.html
				Default context_object_name = book or object


views.py
------------
class BookListView2(ListView):
    model = Book
    template_name = 'testapp/books.html'
    context_object_name = 'books'

books.html
-----------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      <h1>All Books Information</h1>
      <ol>
      {% for book in books %}
	  <li><a href="/{{book.id}}">{{book.title}}</a></li>
      {% endfor %}
	  </ol>
    </div>
  </body>
</html>

urls.py
---------
 path('list2/', views.BookListView2.as_view()),

views.py
------------
class BookDetailView(DetailView):
    model = Book
    #default tempalte file: book_detail.html
    #context_object_name = book or object

urls.py
----------
path('<int:pk>/', views.BookDetailView.as_view())

book_detail.html
--------------------------
<body>
    <div class="container">
      <h1>{{book.title}} Information</h1>
      <ul>
        <li>Title:<strong>{{book.title}}</strong></li>
        <li>Author:<strong>{{book.author}}</strong></li>
        <li>Pages:<strong>{{book.pages}}</strong></li>
        <li>Price:<strong>{{book.price}}</strong></li>
      </ul>
    </div>
  </body>

CreateView:
------------------
-->We can use this class to insert data into our database table(models).

views.py
-------------
class BookCreateView(CreateView):
    model = Book

urls.py
---------
path('create/', views.BookCreateView.as_view())

If we send request
http://127.0.0.1:8000/create

We are getting the following Error:
	ImproperlyConfigured at /create/
Using ModelFormMixin (base class of BookCreateView) without the 'fields' attribute is prohibited.

views.py
-------------
class BookCreateView(CreateView):
    model = Book
    fields = ('title','author','pages','price')

-->If we are sending the request, we will get the following error.
TemplateDoesNotExist at /create/
testapp/book_form.html

Note:
	The default template is display form for create operation is :book_form.html
	We have to create this template file.

book_form.html
------------------------
<body>
    <div class="container" align='center'>
      <h1>Book Insert/Create Form</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" class="btn btn-success" name="" value="Insert New Book">
      </form>
  </body>

If we fill the form and submit:
--------------------------------------------
-->The record will be inserted into database, but we will get an error.
-->After inserting to which page, control has to go, we did not define anywhere. This is the reason for error.

ImproperlyConfigured at /create/
No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model.

models.py
---------------
from django.urls import reverse
class Book(models.Model):
    title = models.CharField(max_length=30)
    author = models.CharField(max_length=30)
    pages = models.IntegerField()
    price = models.FloatField()

    def get_absolute_url(self):
        return reverse('detail',kwargs={'pk':self.pk})

views.py
------------
class BookCreateView(CreateView):
    model = Book
    #fields = ('title','author','pages','price')
    fields = '__all__'

urls.py
---------
path('<int:pk>/', views.BookDetailView.as_view(),name = 'detail'),
path('create/', views.BookCreateView.as_view()),

UpdateView:
------------------
We can use this class to update existing record.

class BookUpdateView(UpdateView):
    model = Book
    fields = '__all__'
	#fields = ('pages','price')
urls.py
----------
path('update/<int:pk>', views.BookUpdateView.as_view())

The default template is:book_form.html

book_form.html
------------------------
<body>
    <div class="container" align='center'>
      <h1>Book Insert/Update Form</h1>
      <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" class="btn btn-success" name="" value="Insert/Update  Book">
      </form>
  </body>

Adding update button in book_details.html page:
--------------------------------------------------------------------------
<a class="btn btn-warning" href="/update/{{book.id}}">Update This Book Information</a>

DeleteView:
------------------
from django.urls import reverse_lazy
class BookDeleteView(DeleteView):
    model = Book
    success_url = reverse_lazy('/list2')

success_url represents the target page which should be displayed after delete operation.

reverse_lazy() function will wait until deleteing the record.

urls.py
---------
path('delete/<int:pk>', views.BookDeleteView.as_view()),

If we are sending the request:
		http://127.0.0.1:8000/delete/1

We are getting an error:
	TemplateDoesNotExist at /delete/1
	testapp/book_confirm_delete.html

-->If we are trying to delete, DeleteView class will ask of confirmation by showing 
book_confirm_delete.html. We should provide this page.

book_confirm_delete.html
---------------------------------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container" align='center'>
      <h1>Do you want to really delete book:{{book.title}}????</h1>
      <form method="post">
        {% csrf_token %}
        <input type="submit" class="btn btn-danger" name="" value="Delete Book">
        <a class="btn btn-success" href="/list2">Cancel(Don't Delete)</a>
      </form>
      </div>
  </body>
</html>

success_url = reverse_lazy('listbooks')
path('list2/', views.BookListView2.as_view(),name='listbooks'),

Add delete button in book_detail.html
---------------------------------------------------------
<a class="btn btn-danger" href="/delete/{{book.id}}">Delete This Book Information</a>

Project for CRUD operations by using CBV's(cbvproject3):
-------------------------------------------------------------------------------------
ListView-->To list out all records information.
DetailView-->To get information about a particular object.
CreateView-->To insert/create a record into the table.
UpdateView-->To update of existing record.
DeleteView-->To delete a particular record.


D:\Django_17Mar_11AM>django-admin startproject cbvproject3
D:\Django_17Mar_11AM>cd cbvproject3
D:\Django_17Mar_11AM\cbvproject3>py manage.py startapp testapp
-->Add app in settings.py

models.py
----------------
class Company(models.Model):
    name = models.CharField(max_length=128)
    location = models.CharField(max_length=64)
    ceo = models.CharField(max_length=64)

-->Makemigrations and migrate.

admin.py
--------------
from testapp.models import Company
# Register your models here.
class CompanyAdmin(admin.ModelAdmin):
    list_display = ['name','location','ceo']
admin.site.register(Company,CompanyAdmin)

views.py
-------------
from django.views.generic import ListView
from testapp.models import Company
# Create your views here.
class CompanyListView(ListView):
    model = Company
    #default template file name:company_list.html
    #default context object name:company_list

base.html
---------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      {% block body_block %}
      {% endblock %}

    </div>
  </body>
</html>

company_list.html
----------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>List of all companies</h1>
<ul>
    {% for company in company_list %}
    <li>{{company.name}}</li>
    <li>{{company.location}}</li>
    <li>{{company.ceo}}</li>
    {% endfor %}
</ul>
<hr>
{% endblock %}

urls.py
---------
path('', views.CompanyListView.as_view()),

views.py
-------------
class ComanyDetailView(DetailView):
    model = Company
    #default template file name:company_detail.html
    #default context object name:company or object

urls.py
-----------
path('<int:pk>', views.CompanyDetailView.as_view()),

company_detail.html
-------------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>{{company.name}} Information</h1>
<ul>
    <h2><li>Company Name:{{company.name}}</li></h2>
    <h2><li>Company Location:{{company.location}}</li></h2>
    <h2><li>Company CEO:{{company.ceo}}</li></h2>
</ul>
{% endblock %}

company_list.html
---------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>List of all companies</h1>
<ul>
    {% for company in company_list %}
    <li><a href="/{{company.id}}">{{company.name}}</a></li>
    {% endfor %}
</ul>
{% endblock %}

views.py
-------------
class CompanyCreateView(CreateView):
    model = Company
    #fields = ['name','location','ceo']
    fields = '__all__'
    #Default template file:company_form.html

company_form.html
------------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Company Insert / Update Form</h1>
<form method="post">
  {{form.as_p}}
  {% csrf_token %}
  <input type="submit" class="btn btn-primary" name="" value="Insert / Update Record">
</form>
{% endblock %}

urls.py
----------
path('create/', views.CompanyCreateView.as_view()),

ImproperlyConfigured at /create/
No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model.

models.py
---------------
from django.urls import reverse
# Create your models here.
class Company(models.Model):
    name = models.CharField(max_length=128)
    location = models.CharField(max_length=64)
    ceo = models.CharField(max_length=64)

    def get_absolute_url(self):
        return reverse('detail',kwargs={'pk':self.pk})

views.py
------------
class CompanyUpdateView(UpdateView):
    model = Company
    fields = ('location','ceo')
    #Default template file:company_form.html

urls.py
----------
path('update/<int:pk>', views.CompanyUpdateView.as_view()),

add update link in company_detail.html
-----------------------------------------------------------
<h1>{{company.name}} Information</h1>

<a class="btn btn-warning" href="/update/{{company.id}}">Update Record</a>
<a class="btn btn-success" href="/">Companies List</a>

views.py
--------------
from django.urls import reverse_lazy
class CompanyDeleteView(DeleteView):
    model = Company
    success_url = reverse_lazy('list')

urls.py
-----------
    path('delete/<int:pk>', views.CompanyDeleteView.as_view()),

company_confirm_delete.html
--------------------------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Do you want to really delete the company:{{company.name}}????</h1><hr>
<form method="post">
  {% csrf_token %}
  <input type="submit" class="btn btn-danger" name="" value="Delete Record">
  <a class="btn btn-success" href="/{{company.id}}">Cancel</a>
</form>
{% endblock %}

company_detail.html
-------------------------------
<a class="btn btn-warning" href="/update/{{company.id}}">Update Record</a>
<a class="btn btn-danger" href="/delete/{{company.id}}">Delete Record</a>
<a class="btn btn-success" href="/">Companies List</a>

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.CompanyListView.as_view(),name='list'),
    path('<int:pk>', views.CompanyDetailView.as_view(),name='detail'),
    path('create/', views.CompanyCreateView.as_view()),
    path('update/<int:pk>', views.CompanyUpdateView.as_view()),
    path('delete/<int:pk>', views.CompanyDeleteView.as_view()),
]

Demo project for CRUD operations by using CBV's(finalcbvproject):
---------------------------------------------------------------------------------------------------
ListView		-->List out all records
DetailView		-->About a particular record
CreateView	-->Insert a record
UpdateView	-->Update existing record
DeleteView	-->Delete a particular record

D:\Django_17Mar_11AM>django-admin startproject finalcbvproject
D:\Django_17Mar_11AM>cd finalcbvproject
D:\Django_17Mar_11AM\finalcbvproject>py manage.py startapp testapp

-->Add app in settings.py

models.py
---------------
class Beer(models.Model):
    name = models.CharField(max_length=128)
    taste = models.CharField(max_length=128)
    color = models.CharField(max_length=128)
    price = models.FloatField()

-->Makemigrations and migrate.

admin.py
--------------
from testapp.models import Beer
# Register your models here.
class BeerAdmin(admin.ModelAdmin):
    list_display = ['name','taste','color','price']
admin.site.register(Beer,BeerAdmin)

-->createsuperuser and some sample data

views.py
-------------
from django.views.generic import ListView,DetailView
from testapp.models import Beer
class BeerListView(ListView):
    model = Beer
    #t_f = beer_list.html
    #c_o_n: beer_list

base.html
---------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  </head>
  <body>
    <div class="container">
      {% block body_block %}
      {% endblock %}
    </div>
  </body>
</html>

beer_list.html
---------------------
<!DOCTYPE html>
{% extends 'testapp/base.html'%}
{% block body_block %}
<h1>Beer Information Dash Board</h1>
<table border="2">
  <thead>
    <th>Beer Name</th>
    <th>Details</th>
    <th>Update</th>
    <th>Delete</th>
  </thead>
  {% for beer in beer_list %}
  <tr>
    <td>{{beer.name}}</td>
    <td><a href="#">Details</a></td>
    <td><a href="#">Update</a></td>
    <td><a href="#">Delete</a></td>
  </tr>
  {% endfor %}
</table>
{% endblock %}

urls.py
----------
path('', views.BeerListView.as_view()),

views.py
-------------
from django.views.generic import ListView,DetailView
from testapp.models import Beer
class BeerDetailView(DetailView):
    model = Beer
    #t_f:beer_detail.views
    #c_o_n:beer or object

beer_detail.html
-------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html'%}
{% block body_block %}
  <div class="jumbotron">
    <h1>Beer Details.....</h1>
    <ul>
      <h2><li>Beer Name:{{beer.name}}</li></h2>
      <h2><li>Beer Taste:{{beer.taste}}</li></h2>
      <h2><li>Beer Color:{{beer.color}}</li></h2>
      <h2><li>Beer Price:{{beer.price}}</li></h2>
    </ul>
  </div>
{% endblock %}

urls.py
----------
path('<int:pk>', views.BeerDetailView.as_view()),

beer_list.html
---------------------
<td><a href="/{{beer.id}}">Details</a></td>

views.py
------------
class BeerCreateView(CreateView):
    model = Beer
	fields = '__all__'
    #t_f:beer_form.html

beer_form.html
-----------------------
<!DOCTYPE html>
{% extends 'testapp/base.html'%}
{% block body_block %}
    <h1>Add NEw Beer Here / Update Existing Beer Here</h1>
    <form method="post">
      {{form.as_p}}
      {% csrf_token %}
      <input type="submit" class="btn btn-primary" name="" value="Insert / Update Record">
    </form>
{% endblock %}

models.py
---------------
from django.urls import reverse
class Beer(models.Model):
    name = models.CharField(max_length=128)
    taste = models.CharField(max_length=128)
    color = models.CharField(max_length=128)
    price = models.FloatField()

    def get_absolute_url(self):
        return reverse('detail',kwargs={'pk':self.pk})

urls.py
----------
path('create/', views.BeerCreateView.as_view()),

beer_list.html
---------------------
<a href="/create" class="btn btn-success">Insert New Beer Record Here</a>		

beer_detail.html
------------------------
<a href="/" class="btn btn-danger">Go To Beer Dash Board</a>

views.py
-------------
class BeerUpdateView(UpdateView):
    model = Beer
    fields = '__all__'
    #t_f:beer_form.html

urls.py
----------
path('update/<int:pk>', views.BeerUpdateView.as_view()),

beer_list.html
--------------------
<td><a href="/update/{{beer.id}}">Update</a></td>

views.py
------------
from django.urls import reverse_lazy
class BeerDeleteView(DeleteView):
    model = Beer
    success_url = reverse_lazy('list')

beer_confirm_delete.html
--------------------------------------
<!DOCTYPE html>
{% extends 'testapp/base.html'%}
{% block body_block %}
    <h1>Do you want to really delete beer:{{beer.name}}???</h1>
    <form method="post">
      {% csrf_token %}
      <input type="submit" class="btn btn-danger" name="" value="Delete Beer">
      <a class="btn btn-success" href="/">Cancel</a>
    </form>
{% endblock %}

urls.py
-----------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.BeerListView.as_view(),name='list'),
    path('<int:pk>', views.BeerDetailView.as_view(),name='detail'),
    path('create/', views.BeerCreateView.as_view()),
    path('update/<int:pk>', views.BeerUpdateView.as_view()),
    path('delete/<int:pk>', views.BeerDeleteView.as_view()),
]

beer_list.html
--------------------
	<td><a href="/{{beer.id}}">Details</a></td>
    <td><a href="/update/{{beer.id}}">Update</a></td>
    <td><a href="/delete/{{beer.id}}">Delete</a></td>

Q.Differences between CBVs and FBVs?
----------------------------------------------------------
							CBVs												FBVs
							--------											--------
1).CBVs can be easily extended.					1).FBVs cannot extended easily
2).CBVs promotes re-usability of the code	2).FBVs cannot promotes re-usability of
																the code.
3).CBVs can use OO techniques such as		3).FBVs cannot use OO techniques.
Mixins(Multiple Inheritance).
4).In CBVs less coding.								4).In FBVs more coding.
5).Default template files and context			5).Default template file and context
object support is available.							object support is not available.
6).There is restriction on the functionality	6).There is no restriction on the
hence less powerful.									functionality, hence more powerful.
7).Implicit execution flow and hence			7).Explicit execution flow and hence
reduces readability.									improves readability.


											CHAPTER-11
											===========
											Django ORM
											============
ORM-->Object Relational Mapping.

To select all employees from the employee table:
sql query:select * from Employee.
ORM:Employee.objects().all()

-->Create ormproject1
-->Create app
-->Add app in settings.py

models.py
---------------
from django.db import models
class Employee(models.Model):
    eno = models.IntegerField()
    ename = models.CharField(max_length=30)
    esal = models.FloatField()
    eaddr = models.CharField(max_length=30)

admin.py
--------------
from django.contrib import admin
from testapp.models import Employee
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

-->makemigrations & migrate.

-->createsuperuser login to admin check for table.

populate.py
-----------------
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','ormproject1.settings')
import django
django.setup()
from testapp.models import Employee
from faker import Faker
from random import *
faker = Faker()
def populate(n):
    for i in range(n):
        feno = randint(1001,9999)
        fename = faker.name()
        fesal = randint(10000,20000)
        feaddr = faker.city()
        emp_record=Employee.objects.get_or_create(
        eno=feno,
        ename=fename,
        esal=fesal,
        eaddr=feaddr)
n = int(input("Enter Number Of Employees:"))
populate(n)
print(f'{n} Records Inserted Successfully......')

-->Check records in admin interface

base.html
---------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <style >
      body{
        background:red;
        color:white;
      }
      a{
        color:yellow;
      }
    </style>
  </head>
  <body>
    <div class="container" align=center>
      {% block body_block %}
      {% endblock %}
    </div>
  </body>
</html>

index.html
----------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}

    <h1>Employee Information DashBoard</h1><hr>
    <table border="2">
      <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
      </thead>
      {% for emp in emp_list %}
      <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
    </tr>
      {% endfor %}
    </table>
    <br><br>
    {% endblock %}

views.py
-----------
def retrieve_view(request):
    emp_list = Employee.objects.all()
    return render(request,'testapp/index.html',{'emp_list':emp_list})

urls.py
----------
path('', views.retrieve_view),

To select all records:
---------------------------------
Employee.objects().all()
The return type of all() method is: QuerySet

views.py
------------
emp_list = Employee.objects.all()
print(type(emp_list))
<class 'django.db.models.query.QuerySet'>

To get a particular record:
---------------------------------------
We have to use get() method.

D:\DjangoOfflineProject\ormproject>py manage.py shell
Python 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from testapp.models import Employee
>>> emp = Employee.objects.get(id=1)
>>> emp
<Employee: Employee object (1)
>>> emp.ename
'Jordan Murphy'
>>> emp.eno
8099
>>> emp.esal
189112.0
>>> emp.eaddr
'North Andrewport'
>>>type(emp)

-->The return type of get() method is Employee object

How to find query associated with QuerySet:
------------------------------------------------------------------
-->Every ORM statement will be converted into sql query. we can find query from the QuerySet.

>>>qs = Employee.objects.all()
>>>str(qs.query)
'SELECT "testapp_employee"."id", "testapp_employee"."eno", "testapp_employee"."ename", "testapp_employee"."esal", "testapp_employee"."eaddr" FROM "testapp_employee"'

How to filter records based on some condition:
-----------------------------------------------------------------------
emp_list = Employee.objects.filter(esal__gt=15000)
	It returns all employees whose salaries grater than 15000

emp_list = Employee.objects.filter(esal__gte=15000)
	It returns all employees whose salaries grater than or equal to 15000

Similarly we can use __lt and __lte also

Various possible field lookups:
---------------------------------------------
1).exact-->exact match
	emp_list = Employee.objects.get(id__exact=14)
	emp_list = Employee.objects.get(id=14)

>>>emp = Employee.objects.get(id__exact=14)
>>>emp.ename

>>>emp = Employee.objects.get(id=14)
>>>emp.ename

2).iexact-->case insensitive exact match
>>>emp = Employee.objects.get(ename__iexact='colleen Martin')
>>>emp.ename

Note:The equivalant sql query is something like
		select .....where ename like 'coleen Martin'.

3).contains-->case sensitive containment test
	Itis something like
			select ....where name like '%jhon%'
emp_list = Employee.objects.filter(ename__contains='John')

4).icontains-->case insensitive
	emp_list = Employee.objects.filter(ename__contains='John')
	emp_list = Employee.objects.filter(ename__icontains='john')

5).in:
	in a given iterable like tuple or list etc
	select all employees where id is in [1,3,5]
	emp_list = Employee.objects.filter(id__in=[1,3,5])

6).gt:
	greater than

7).gte:
	greater than or equal to

8).lt:
	less than

9).lte:
	less than or equal to

10).startswith:
	case sensitive starts with
	select all employees where ename starts with 'D'
	emp_list = Employee.objects.filter(ename__startswith='A')

11).istartswith:
	case insenstive starts with
	emp_list = Employee.objects.filter(ename__istartswith='a')

12).endswith:
	case sensitive ends with
	emp_list = Employee.objects.filter(ename__endswith='i')

13).iendswith:
	case insensitive ends with
	emp_list = Employee.objects.filter(ename__iendswith='i')

14).range:
	range test(inclusive)
	To select all employee where esal in the range 12000 to 16000
	emp_list = Employee.objects.filter(esal__range=[12000,15000])

Q1.Select all employees where ename starts with 'D'
	emp_list = Employee.objects.filter(ename__startswith='D')

Q2.Select all employees whose salry is < 15000?
	emp_list = Employee.objects.filter(esal__lt=15000)

Q3.Select all employees where ename starts with 'D' or esal < 15000.
We can implement  OR queries in 2-ways?

1st way:
------------
emp_list = queryset1 | queryset2
Ex:
emp_list = Employee.objects.filter(ename__startswith='D') | Employee.objects.filter(esal__lt=15000)

2nd way:
-------------
filter(Q(condition1) | Q(condition2))
Ex:
from django.db.models import Q
emp_list = Employee.objects.filter(Q(condition1) | Q(condition2))
emp_list = Employee.objects.filter(Q(ename__startswith='D') | Q(esal__lt=15000))

Summary:
----------------
1).queryset1 | queryset2
2).filter(Q(condition1) | Q(condition2))

How to implement AND queries in Django ORM:
----------------------------------------------------------------------
AND: all condition should be satisfied.

3-ways are there:
-------------------------
1).queryset1 & queryset2
2).filter(Q(condition1) & Q(condition2))
3).filter(condition1,condition2)

Ex:
Select all employees where ename starts with 'D' and esal < 15000.
1).emp_list = Employee.objects.filter(ename__startswith='D') & Employee.objects.filter(esal__lt=15000)

2).emp_list = Employee.objects.filter(Q(ename__startswith='D') & Q(esal__lt=15000))

3).emp_list = Employee.objects.filter(ename__startswith='D',esal__lt=15000)

How to implement Not queries in Django ORM:
----------------------------------------------------------------------
all()-->To get all records
filter(condition)-->To get records where condition is satisfied.

We can implememnt NOT queries in 2-ways:
------------------------------------------------------------------
1st way:exclude(condition)-->To get records where condition is failed.
2nd way:filter(~Q(condition))

Ex:To select all employees whose name starts with 'D'
emp_list = Employee.objects.exclude(ename__startswith='D')
emp_list = Employee.objects.filter(~Q(ename__startswith='D'))

How to select only required columns in the query set:
--------------------------------------------------------------------------------
select * from employee;
select ename,esal from employee;

3-ways:
-----------
1).By using values_list():
------------------------------------
emp_list = Employee.objects.all().values_list('ename','esal')

views.py:
------------
def retrieve_view(request):
	emp_list = Employee.objects.all().values_list('ename','esal')
	return render(request,'testapp/specificcolumns.html',{'emp_list':emp_list})

specificcolumns.html
--------------------------------
<h1>Employee Information DashBoard</h1><hr>
    <table border="2">
      <thead>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        </thead>
      {% for emp in emp_list %}
      <tr>
        <td>{{emp}}</td>
        <td>{{emp}}</td>
	  </tr>
      {% endfor %}
    </table>
    
Changes:
-------------
{% for emp in emp_list %}
      <tr>
	  {% for v in emp %}
        <td>{{v}}</td>
      </tr>
{% endfor %}
    
2).By using values():
------------------------------
	emp_list = Employee.objects.all().values('ename','esal')

html file
------------
{% for emp in emp_list %}
      <tr>
	  {% for k,v in emp.items %}
        <td>{{v}}</td>
      </tr>
{% endfor %}

3)By using only():
-------------------------
	emp_list = Employee.objects.all().only('ename','esal')

html file
-------------
{% for emp in emp_list %}
      <tr>
	    <td>{{emp.ename}}</td>
		<td>{{emp.esa}}</td>
      </tr>
{% endfor %}

Note:
	values_list()-->QuerySet contains tuple
	values()-->QuerySet contains dict objects
	only()-->QuerySet contains Employee objects
-->Hence values() method is recommended to use when comapred with others. 

Aggregate Functions:
-------------------------------
Django ORM defines several functions to perform aggregate operations.
Avg(),Max(),Min(),Sum(),Count() etc....

views.py
------------
from django.db.models import Avg,Max,Min,Sum,Count
def aggregate_view(request):
    avg = Employee.objects.all().aggregate(Avg('esal'))
    max = Employee.objects.all().aggregate(Max('esal'))
    min = Employee.objects.all().aggregate(Min('esal'))
    sum = Employee.objects.all().aggregate(Sum('esal'))
    count = Employee.objects.all().aggregate(Count('esal'))
    my_dict = {'avg':avg['esal__avg'],'max':max['esal__max'],'min':min['esal__min'],'sum':sum['esal__sum'],'count':count['esal__count']}
    return render(request,'testapp/aggregate.html',my_dict)

aggregate.html
----------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}

    <h1>Employee Aggregate Information</h1><hr>
      <ul>
        <h2><li>Average Salary:{{avg}}</li></h2>
        <h2><li>Maximum Salary:{{max}}</li></h2>
        <h2><li>Minimum Salary:{{min}}</li></h2>
        <h2><li>Total Salary:{{sum}}</li></h2>
        <h2><li>Number of Employees:{{count}}</li></h2>
      </ul>
    {% endblock %}

urls.py
----------
path('agg', views.aggregate_view),

How to create, update and delete records:
---------------------------------------------------------------
1st way:py manage.py shell
-----------------------------------------
>>>Employee.objects.all().count()
>>>e=Employee(eno=1234,ename='Mahesh',esal=1234.0,eaddr='Vja')
>>>e.save() # This employee will be inserted into database

2nd way:
-------------
>>Employee.objects.create(eno=2345,ename='Sunny',esal=1234.50,eaddr='Mumbai')

How to add multiple records at a time(Bulk Create):
-----------------------------------------------------------------------------
By using method bulk_create method

[Employee(eno=7777,ename='Sachin',esal=77777.0,eaddr='Mumbai'),
Employee(eno=8888,ename='Kohli',esal=88888.0,eaddr='Delhi'),
Employee(eno=6666,ename='Dhoni',esal=99999.0,eaddr='Ranchi'),
Employee(eno=9999,ename='Rohit',esal=66666.0,eaddr='Mumbai'),]

Employee.objects.bulk_create([Employee(eno=7777,ename='Sachin',esal=77777.0,eaddr='Mumbai'),Employee(eno=8888,ename='Kohli',esal=88888.0,eaddr='Delhi'),
Employee(eno=6666,ename='Dhoni',esal=99999.0,eaddr='Ranchi'),
Employee(eno=9999,ename='Rohit',esal=66666.0,eaddr='Mumbai'),])

How to delete single record:
-----------------------------------------
e=Employee.objects.get(eno=3155)
e.delete()

>>> e=Employee.objects.get(eno=3155)
>>> e.delete()
(1, {'testapp.Employee': 1})

How to delete multiple records:
-----------------------------------------------
>>> qs=Employee.objects.filter(esal__gte=15000)
>>> qs.count()
51
>>> qs.delete()
(51, {'testapp.Employee': 51})
>>> qs.count()
0

How to delete all records:
---------------------------------------
qs=Employee.objects.all()
qs.delete()

or

Employee.objects.all().delete()

How to update record:
---------------------------------
>>> e=Employee.objects.get(eno=4620)
>>> e.eno
4620
>>> e.ename
'Ronald Stanton'
>>> e.esal
10502.0
>>> e.esal=15000
>>> e.save()
>>> e.ename="sunny"
>>> e.save()

How to order queries in sorting order:
---------------------------------------------------------
emp_list = Employee.objects.all()

views.py
-------------
1).To sort all employees according to assending order eno.
emp_list = Employee.objects.all().order_by('eno')

2).To sort all employees according to descending order eno.
emp_list = Employee.objects.all().order_by('-eno')

3).To get highest salaried employee object?
Arrange all employees in descending order and select first employee.
	>>>e = Employee.objects.all().order_by('-esal')[0]
	>>>e.esal
	>>>e.ename

4).To get second highest salary employee.
	>>>e = Employee.objects.all().order_by('-esal')[1]
	>>>e.esal
	>>>e.ename

5).To get all employees based on alphabatical order of names?
	emp_list = Employee.objects.all().order_by('ename')

6).To ignore case?
By using Lower function

from django.db.models.functions import Lower
	emp_list = Employee.objects.all().order_by(Lower('ename'))

How to perform union operations for query set:
----------------------------------------------------------------------
By using union operation, we can combine results of 2 or more queries from same model or from different models.

q1 = Employee.objects.filter(esal__lt=15000)
q2 = Employee.objects.filter(ename__startswith='J')
q3 = q1.union(q2)
emp_list = q3

Towork with multiple models:
===========================
Student(name,mailid,aadharnumber,marks)
Teacher(name,mailid,aadharnumber,subject,sal)

q1 = Student.objects.all().values_list('name','mailid','aadharnumber')
q1 = Teacher.objects.all().values_list('name','mailid','aadharnumber')
q3 = q1.union(q2)

										CHAPTER-13
										===========
						Working with Django Middleware
						-------------------------------------------------
-->At pre processing of request or at post processing of request, if we want to perform any activity automatically then we should go for middleware.
-->It is like filters concept in java's servlets.

http://127.0.0.1:8000
http://127.0.0.1:8000/
http://127.0.0.1:8000/agg
http://127.0.0.1:8000/agg/
CommonMiddleware

submit the form-->csrf verification
CsrfViewMiddleware

AuthenticationMiddleware
-->In aggregate_view ormproject give this line and check in console
print(request.user)
-->comment in settings AuthenticationMiddleware

http--->https===>SecurityMiddleware.

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
							Diagram
			
-->Middleware is applicable for ever incoming request and outgoing response.

-->Based our requirement , we can configure our own middleware also.

Middleware Structure:
---------------------------------
Based on our requirement, we can configure our own middleware also.
Every customized middleware is a python class and it is the child class of object.
class A(object):
class A:

This python class should contains 2 mandatory methods and 3 optional methods.

1).def __init__(self,get_response):

-->get_response is a function which can be used to send request to the next level and to get required response.

-->This method will be executed only once at the time of creating middleware class object, which is mostly happened at the time of server starting.

2).def __call__(self,request):
	This method will be executed for ever request separately.
	#code for prep rocessing of request
	response = self.get_response(request)#Trigger request to the next level
	#code for post processing of request
	return response

1).def __init__(self,get_response):
2).def __call__(self,request):
		#Pre processing of request
		#Forward request to the next level and get response
		#Post processing of request
		return response

Middleware classes we have to define middleware.py file(inside testapp)

Demo application for custom middleware execution flow:
------------------------------------------------------------------------------------
django-admin startproject middlewareproject1
py manage.py startapp testapp
add app in settings.py

views.py
------------
from django.http import HttpResponse
# Create your views here.
def welcome_view(request):
    print("This line added by view function")
    return HttpResponse('<h1>Custom Middleware Demo</h1>')
	
urls.py
----------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.welcome_view),
]

inside testapp folder:
--------------------------------
middleware.py
---------------------
class ExecutionFlowMiddleware(object):
    def __init__(self,get_response):
        print('init method execution....')
        self.get_response = get_response
    def __call__(self,request):
        print('preprocessing of request')
        response = self.get_response(request)
        print('Post processing of request')
        return response

settings.py
----------------
MIDDLEWARE = [
    ......
    'testapp.middleware.ExecutionFlowMiddleware'
]
			
Middleware application to show information saying is under maintenance:
---------------------------------------------------------------------------------------------------------------
-->Create project middlewareproject2
-->Create testapp
-->Add app in settings.py
views.py
------------
from django.http import HttpResponse
def home_page_view(request):
    return HttpResponse('<h1>Hello this response is from view function response</h1>')

urls.py
---------
path('hello/', views.home_page_view),

middleware.py
---------------------
from django.http import HttpResponse
class AppMaintenanceMiddleware(object):
    def __init__(self,get_response):
        self.get_response = get_response

    def __call__(self,request):
        return HttpResponse('<h1>Currently application under maintenance..Please try after 2 days</h1>')

settings.py
----------------
MIDDLEWARE = [
    'testapp.middleware.AppMaintenanceMiddleware'
]

Middleware Application to show meaningful response if view functuion raises any error:
------------------------------------------------------------------------------------------------------------------------
In the middleware we can define the following method, which will be executed if view function raises any error.

	process_exception(self,request,exception)

-->Create middlewareproject3
-->Create an app
-->Add app in settings.py

views.py
-------------
from django.shortcuts import render
from django.http import HttpResponse
def home_page_view(request):
    print(10/0)
    return HttpResponse('<h1>This is from view function</h1>')

urls.py
----------
path('hello/', home_page_view),

middleware.py
---------------------
from django.http import HttpResponse
class ErrorMessageMiddleware(object):
    def __init__(self,get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_exception(self,request,exception):
        #return HttpResponse('<h1>Currently we are facing some technical problem....pls try after some time</h1>')
        return HttpResponse(f'<h1>Currently we are facing some technical problems<br>The Raised Exception:{exception.__class__.__name__}<br>The Exception Message:{exception}</h1>')

settings.py
----------------
MIDDLEWARE = [
    ....
    'testapp.middleware.ErrorMessageMiddleware'
]

Configuration of Multiple middleware classes:
--------------------------------------------------------------------
We can configure any number of middlewares and all these middlewares will be executed according to order declared inside settings.py

-->Create middlewareproject4
-->Create app
-->Add app in settings.py

views.py
------------
from django.shortcuts import render
from django.http import HttpResponse
def home_page_view(request):
    print("This line printed by view function...")
    return HttpResponse('<h1>This is from view function</h1>')

urls.py
----------
path('hello/',views.home_page_view)

-->Send a request.

middleware.py
---------------------
from django.http import HttpResponse
class FirstMiddleware(object):
    def __init__(self,get_response):
        self.get_response = get_response

    def __call__(self, request):
		print('This line printed by Middleware-1 before processing request')
        response = self.get_response(request)
		print('This line printed by Middleware-1 after processing request')
        return response

settings.py
----------------
MIDDLEWARE =[
	'testapp.middleware.FirstMiddleware'
]

views.py
------------
class SecondMiddleware(object):
    def __init__(self,get_response):
        self.get_response = get_response

    def __call__(self, request):
		print('This line printed by Middleware-2 before processing request')
        response = self.get_response(request)
		print('This line printed by Middleware-2 after processing request')
        return response

settings.py
----------------
MIDDLEWARE =[
	'testapp.middleware.FirstMiddleware',
	'testapp.middleware.SecondMiddleware'
]

-->After execution change order of middlewares in settings.py

settings.py
----------------
MIDDLEWARE =[
	'testapp.middleware.SecondMiddleware',
	'testapp.middleware.FirstMiddleware',
]

											CHAPTER-12
											--------------------
						Working with Advanced Model concepts
						-----------------------------------------------------------
Model Inheritance:
----------------------------
5 types of model inheritances in django.

1).Abstract Base class model inheritance
2).Multi table inheritance
	3).Multi level inheritance
	4).Multiple inheritance
5).Proxy model inheritance

1).Abstract Base class model inheritance:
-------------------------------------------------------------
-->If several model classes having some common fields, then it is not recommended to write these fields in every model class separately, because it increases length of the code and reduces readability.

-->We have to separate those common fileds into a separate Model class which is nothing but Base class. If we extend Base class then automatically common fileds will be inherited to every child class.

without inheritance:
------------------------------
class Student(models.Model):
	name = models.CharField(max_length=30)
	email = models.EmailField()
	address = models.CharField(max_length=30)
	rollno = models.IntegerField()
	marks = models.IntegerField()

class Teacher(models.Model):
	name = models.CharField(max_length=30)
	email = models.EmailField()
	address = models.CharField(max_length=30)
	subject = models.CharField(max_length=30)
	salary = models.FloatField()

with inheritance:
-------------------------
class ContactInfo(models.Model):
	name = models.CharField(max_length=30)
	email = models.EmailField()
	address = models.CharField(max_length=30)
	class Meta:
		abstract = True
class Student(ContactInfo):
	rollno = models.IntegerField()
	marks = models.IntegerField()
class Teacher(ContactInfo):
	subject = models.CharField(max_length=30)
	salary = models.FloatField()

models.py
---------------
from django.db import models

# Create your models here.
class ContactInfo(models.Model):
	name = models.CharField(max_length=30)
	email = models.EmailField()
	address = models.CharField(max_length=30)
	class Meta:
		abstract = True
class Student(ContactInfo):
	rollno = models.IntegerField()
	marks = models.IntegerField()
class Teacher(ContactInfo):
	subject = models.CharField(max_length=30)
	salary = models.FloatField()

admin.py
-------------
from django.contrib import admin
from testapp.models import Student,Teacher
# Register your models here.
admin.site.register(Student)
admin.site.register(Teacher)

settings.py
----------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'newmidb',
		'USER':'root',
		'PASSWORD':'root',
		'HOST':'localhost',
		'PORT':3306,
    }
}

Note:
	ContactInfo class is abstract class and hence table won't be created.
	This type of inheritance is applicable only at code level but not at database level.

2).Multi table inheritance:
---------------------------------------
-->If the Base class is not abstract, then such type of inheritance is called as multi table inheritance.
-->This type of inheritance applicable at code level and db level.
-->In multi table inheritance, inside database, for both parent and child, tables will be created.

models.py
--------------
class ContactInfo1(models.Model):
	name = models.CharField(max_length=30)
	email = models.EmailField()
	address = models.CharField(max_length=30)
class Student1(ContactInfo1):
	rollno = models.IntegerField()
	marks = models.IntegerField()
class Teacher1(ContactInfo1):
	subject = models.CharField(max_length=30)
	salary = models.FloatField()

admin.py
-------------
from testapp.models import *
# Register your models here.
admin.site.register(Student)
admin.site.register(Teacher)
admin.site.register(Student1)
admin.site.register(Teacher1)
admin.site.register(ContactInfo1)

-->In this case 3 tables will be created and child table will maintain pointer to parent table to refer the common properties.

3).Multi level inheritance:
---------------------------------------
-->Inheritance at multiple levels.
Ex:
----
class Person(models.Model):
    name = models.CharField(max_length=30)
    age = models.IntegerField()
class Employee(Person):
    eno = models.IntegerField()
    esal = models.FloatField()
class Manager(Employee):
    exp = models.IntegerField()
    team_size = models.IntegerField()

-->It is also multi table inheritance only internally.

admin.py
-------------
admin.site.register(Person)
admin.site.register(Employee)
admin.site.register(Manager)

mysql> desc testapp_person
mysql> desc testapp_employee
mysql> desc testapp_manager

4).Multiple inheritance:
------------------------------------
-->If model class extends multiple parent classes simultaneously then such type of inheritance is called as multiple inheritance.
Ex:
----
class Parent1(models.Model):
    f1 = models.CharField(max_length=30)
    f2 = models.CharField(max_length=30)
class Parent2(models.Model):
    f3 = models.CharField(max_length=30,primary_key=True)
    f4 = models.CharField(max_length=30)
class Child(Parent1,Parent2):
    f5 = models.CharField(max_length=30)
    f6 = models.CharField(max_length=30)

Note:
1).Parent classes should not contain common fileds, otherwise we will get an error.
2).Internally this inheritance also multitable inheritance.

Makemigrations & Migrate

mysql> desc testapp_parent1
mysql> desc testapp_parent2
mysql> desc testapp_child

Model Manager:
-----------------------
-->We can use ModelManager to interact with database.
-->We can get default ModelManager by using Model.objects proeprty.
-->Model.objects is of type:django.db.models.manager.Manager

manager = Employee.objects
employee_list = manger.all()

Q1.What is the purpose of Model Manager?
	To interact with database.
Q2.How to get default model manager?
	By using Model.objects property
Q3. Model Manager is of what type?
	django.db.models.manager.Manager

-->Go to shell.
	
Ex:
----
>>> from testapp.models import Person
>>> type(Person.objects)
<class 'django.db.models.manager.Manager'>

Based on our requirement, we can define and use our own custom model managers.

Employee model contains : 1000 records
Employees = Employee.objects.all()-->To get all records based on insertion order.
Employees = Employee.objects.all()-->To get all records based on ascending order of eno's.

How to define our own custom manager:
------------------------------------------------------------
-->We have to create child class for models.Manager class.
-->Whenever we are calling all() method, internally it will call get_queryset() method.
-->To custiomize behaviour , we have to override this method in our custom manger class.

Ex:To retrieve all employees data according to ascending order of eno, we have to define CustomManger class.

-->Create new project miproject2
-->Create app
-->Add app in settings.py

models.py
----------------
from django.db import models
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)
    objects = CustomManager()

class CustomManager(models.Manager):
    def get_queryset(self):
        qs = super().get_queryset().order_by('eno')
        return qs

admin.py
-------------
from django.contrib import admin
# Register your models here.
from testapp.models import Employee
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

views.py
------------
from django.shortcuts import render
from testapp.models import Employee
# Create your views here.
def display_view(request):
    #emp_list = Employee.objects.all()
    #emp_list = Employee.objects.get_emp_sal_range(18000,20000)
    #emp_list = Employee.objects.get_emp_sorted_by('ename')
    emp_list = Employee.objects.get_emp_sorted_by('-esal')
    return render(request,'testapp/index.html',{'emp_list':emp_list})

index.html
----------------
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <style >
      body{
        background:red;
        color:white;
      }
      a{
        color:yellow;
      }
    </style>
  </head>
  <body>
    <div class="container" align=center>
      <h1>Welcome To Employee List</h1><hr>
    <table border="2">
      <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
      </thead>
      {% for emp in emp_list %}
      <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
      </tr>
      {% endfor %}
    </table>
    </div>
  </body>
</html>

urls.py
---------
from testapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('data/', views.display_view),
]

populate.py
-----------------
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','miproject2.settings')
import django
django.setup()
from testapp.models import Employee
from faker import Faker
from random import *
faker = Faker()
def populate(n):
    for i in range(n):
        feno = randint(1001,9999)
        fename = faker.name()
        fesal = randint(10000,20000)
        feaddr = faker.city()
        emp_record=Employee.objects.get_or_create(
        eno=feno,
        ename=fename,
        esal=fesal,
        eaddr=feaddr)
n = int(input("Enter Number Of Employees:"))
populate(n)
print(f'{n} Records Inserted Successfully......')

-->Based on our requirement, we can define our own new methods also inside CustomManage class.

models.py
---------------
from django.db import models

class CustomManager(models.Manager):
    def get_queryset(self):
        qs = super().get_queryset().order_by('eno')
        return qs
    def get_emp_sal_range(self,minsal,maxsal):
        qs = super().get_queryset().filter(esal__range=(minsal,maxsal))
        return qs
    def get_emp_sorted_by(self,param):
        qs = super().get_queryset().order_by(param)
        return qs

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)
    objects = CustomManager()

5).Proxy Model Inheritance:
-----------------------------------------
-->For the same Model, we can provide a customized view without touching the database. This is possible by using Proxy Model Inheritance.

-->In this inheritance , a separate new table wont be created and new proxy model also pointing to the same old table.

class Employee:
	fields

class ProxyEmployee(Employee):
	class Meta:
		proxy = True

Both Employee and ProxyEmployee are pointing to the same table only.

models.py
---------------
from django.db import models

class CustomManager1(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(esal__gte=15000)
class CustomManager2(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(esal__lte=15000)
class CustomManager3(models.Manager):
    def get_queryset(self):
        return super().get_queryset().order_by('eno')

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)
    objects = CustomManager1()

class ProxyEmployee1(Employee):
    objects = CustomManager2()
    class Meta:
        proxy = True

class ProxyEmployee2(Employee):
    objects = CustomManager3()
    class Meta:
        proxy = True

admin.py
-------------
from django.contrib import admin
from testapp.models import *

# Register your models here.
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']

class ProxyEmployee1Admin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']

class ProxyEmployee2Admin(admin.ModelAdmin):
    list_display = ['eno','ename','esal','eaddr']

admin.site.register(Employee,EmployeeAdmin)
admin.site.register(ProxyEmployee1,ProxyEmployee1Admin)
admin.site.register(ProxyEmployee2,ProxyEmployee2Admin)

views.py
-------------
from django.shortcuts import render
from testapp.models import *
# Create your views here.
def display_view(request):
    #emp_list = Employee.objects.all()
    #emp_list = ProxyEmployee1.objects.all()
    emp_list = ProxyEmployee2.objects.all()
    return render(request,'testapp/index.html',{'emp_list':emp_list})

urls.py
----------
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('data/', views.display_view),
]

											CHAPTER-14
											============
				Deployment of our application to the live environment
				-----------------------------------------------------------------------------------
Deployment-->The process of moving application to the live/production.

There are several deploymnet options are available for django web application. These options will be based on.

1).Scalability
2).Performance
3).Price
4).Security
5).Easy to use
etc.........

The following are various deployment options:
	1).Pythonanywhere.com
		It is very simple and easy to use.
	2).Digital Ocean-->VPS(Virtual Private Server)
	3).Heroku
	4).Amazon Cloud
	etc.......

Note:For every platform clear documentation steps are available.

GIT,			GITHUB,GitLab,BitBucket etc.......

1).Version Control System
2).Remote Hosting Server
3).Deployment Platform

Need of version control system:
------------------------------------------------
-->To maintain multiple versions of the same project.
-->At any point of time, we can have backup of previous version.
-->We can see the differences between 2 or more versions in our code base.
-->We can run multiple versions of the same project simultaniously.
-->It helps us to track history over time and collabrate easily with others etc...

Top 15 Version Control Software Tools
#1) Git
#2) CVS
#3) SVN
#4) Mercurial
#5) Monotone
#6) Bazaar
#7) TFS
#8) VSTS
#9) Perforce Helix Core 
#10) IBM Rational ClearCase
#11) Revision Control System 
#12) Visual SourceSafe(VSS) 
#13) CA Harvest Software Change Manager
#14) PVCS 
#15) darcs 

Note: Git is a version control system, which maintain and track different versions.

Git Vs GitHub:
----------------------
-->Git is a version control system that helps to track changes in our code.
-->Github is a remote hosting platform to host our files remotely.
-->Github is to host our remote code repository.

Remote hosting platforms:GitHub, bitbucket, gitlab...

Note:
	If our application at remote hosting platform then deployment on various 
	platforms will become very easy.

Deployment platforms:
----------------------------------
where we have to deploy our application.

Ex:
1).Pythonanywhere.com
2).Digital Ocean-->VPS(Virtual Private Server)
3).Heroku
4).Amazon Cloud
etc.......

Version control system Vs Remote Hosting Platform Vs Deployment Platforms:
----------------------------------------------------------------------------------------------------------------------
How to install GIT:
----------------------------
https://git-scm.com/downloads

Source Code Management Software

ls
git status
git init

Activities related to Git Repository:
------------------------------------------------------
1).Create a directory named with my_cwd. It is our current working directory.
2).We required a local repository to track or files. For this we have to use the command:
		git init:
			This command will create a folder named with .git, which acts as local repository.
3).Bydefault git wont track any files. We have to add files to the staging area, such files only can be tracked by git.

We can add files to the staging area by using.
	git add abc.txt
	git add .==>. means all files present in current working directory

4).We have to commit the changes in the files present in staging area. Then the files/changes will be moved to local repository
		git commit -m 'first commit by mahesh'
 
5).We can find status of files by using
		git status

6).We can find all commits related to our local repo?
		git log

git init-->To create and initialize local repository.
git add files-->To add files to staging area.
git commit -m 'commit message'-->To commit changes so that changes will be stored in local repo.
git status-->To find status.
git log-->To seel all commits.

github:
----------
email:durgasoftonline1240@gmail.com
password:durga#@786
username:maheshdj123

gmail:
---------
durgasoftonline1240@gmail.com
durga@786

push an existing repository from the command line:
-----------------------------------------------------------------------------
git remote add origin https://github.com/maheshdj123/djangorepo2.git
git branch -M main
git push -u origin main

#git config --list (To check of username and mail id)
#git config --global user.email "durgasoftonline1240@gmail.com"
#git config --global user.name "maheshdj123"

How to generate token in github.com
-------------------------------------------------------
https://github.com/settings/tokens
Token:

How to update this token in the local system:
---------------------------------------------------------------------
control pannel-->user accounts-->credential manager-->windows credentials-->github.com-->edit-->password: give generated token

2nd repo:
---------------
git remote add origin https://github.com/maheshdj123/djangorepo2.git
git branch -M main
git push -u origin main

Deployment on pythonanywhere.com
--------------------------------------------------------
your-username.pythonanywhere.com

username:maheshproject
email:durgasoftonline1240@gmail.com
password:durga#@786

Dashboard
Consoles
Files
Web
Tasks
Databases

Virtual Environment:
--------------------------------
It is an isolated environment where we can install our project specific required softwares. We can develop and run our application in this environment.

Creation of virtual environment:
------------------------------------------------
Consoles-->Bash

$mkvirtualenv --python=python3.10 myproj

Here myproj-->Name of the virtual environment.

(myproj) 07:37 ~ $:
	It means myproj virtual environment created and currently active.

pip list
----------
Package    Version
------------	-----------
asgiref		3.6.0
Django		4.1
pip			22.1.2
setuptools 62.6.0
sqlparse	0.4.3
wheel		0.37.1
(myproj)	07:37 ~ $ 

C:\Users\mahesh>py
Python 3.10.5 (tags/v3.10.5:f377153, Jun  6 2022, 16:14:13) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import django
>>> django.__version__
'4.1'

$pip install -U django==4.1

Copy our application from git hub to virtual env(pythonanywhere.com)
---------------------------------------------------------------------------------------------------------
github : https://github.com/maheshdj123/Djangorepo2.git

command : git clone https://github.com/maheshdj123/Djangorepo2.git

$ git clone https://github.com/maheshdj123/Djangorepo2.git
$ ls
$ cd djangorepo2
$ ls
$ cd firstproject
$ ls
$ pwd

source code path:/home/maheshproject/djangorepo2/firstproject

configure on the web tab:
---------------------------------------
source code path:/home/maheshproject/djangorepo2/firstproject

virtual env:/home/maheshproject/.virtualenvs/myproj

	.virtualenvs	-------> . means hidden directory

WSGI configurations:
-------------------------------
maheshproject_pythonanywhere_com_wsgi.py

Remove hello world related configuration

import os
import sys
path = '/home/maheshproject/djangorepo2/firstproject'
if path not in sys.path:
	sys.path.append(path)
os.chdir(path)
os.environ.setdefault('DJANGO_SETTINGS_MODULE','firstproject.settings')
import django
django.setup()

uncomment line num 57 n 58 in wsgi.py
------------------------------------------------------------
from django.core.wsgi ..........
application = get_wsgi_application()

------------------------------------------------------------------------------------
We will get an error
-----------------------------
DisallowedHost at /
Invalid HTTP_HOST header: 'maheshproject.pythonanywhere.com'. You may need to add 'maheshproject.pythonanywhere.com' to ALLOWED_HOSTS.

in settings.py:
	ALLOWED_HOSTS = ['maheshproject.pythonanywhere.com']

https://maheshproject.pythonanywhere.com:
	It will display all url's, so no security to prevent this
	
In settings.py it is highly recommended to set DEBUG=False in production.

		https://maheshproject.pythonanywhere.com/hello

How to configure static files:
-------------------------------------------
pythonanywhere.com:
	web tab-->go to static url

For admin application:
	URL:/static/admin
	Path:/home/maheshproject/.virtualenvs/myproj/lib/python3.10/site-packages/django/contrib/admin/static/admin

-->Reload application.
		https://maheshproject.pythonanywhere.com/admin

For our application:
-----------------------------
	URL: /static
	Path:/home/maheshproject/Djangorepo2/firstproject/static

-------------------------------------------------------------------------------------------------------------------------
Summary steps:
-----------------------
create local repo with our project
move this to remote repository
clone this to pythonanywhere.com
do required configurations.

1.create a new folder my_cwd4
2.copy maheshjobs project paste in my_cwd4
3.go to gitbash.
	$cd d:
	$cd my_cwd4
	$cd maheshjobs
	$git init
	$git add .
	$git status
	$git commit -m 'first commit'
	$git status

-->go to github:
	create new repository jobs_repo

-->go to gitbash:
	git remote add origin https://github.com/maheshdj123/jobs_repo.git
	#origin means alias name to remote repository
	git branch -M main
	git push -u origin main

-->Goto github check project is availbale or not.

-->goto pythonanywhere.com

-->In dashboarg-->New console-->bash console
-->create vnev
	$mkvirtualenv --python=python3.10 myproj2
			myproj2 is name of the virtual environment.

$pip list

go to cmd prompt:
	d:\Mahesh_Classes>py
	>>import django
	>>django.__version__

$pip install -U django==4.1
$pip list
$ctrl + L

github:
	https://github.com/maheshdj123/jobs_repo.git

How can i get this project in local repository:
	create working directory(my_working_directory)
	go to gitbash
	$cd D:
	$cd my_working_directory
	$git init
	$git clone https://github.com/maheshdj123/jobs_repo.git

go to virtualenv in pythonanywhere.com:
	$git clone https://github.com/maheshdj123/jobs_repo.git
	$ls
	$cd jobs_repo
	$ls
	$cd maheshjobs
	$pwd

source code path:/home/maheshproject/jobs_repo/maheshjobs
	$ls
	$py manage.py makemigrations

-->If any problems came configure with sqlite-3 in settings.py

	$py manage.py makemigrations
	$py manage.py migrate
	$py manage.py createsuperuser
	$ls

-->Go to web tab:
	delete existing project.
	Add a new web app-->	manual configuration-->select python-3.10
	give source path:/home/maheshproject/jobs_repo/maheshjobs
	virtualenv:/home/maheshproject/.virtualenvs/myproj2
-->Reload application.
-->Let access website

configure wsgi.py
--------------------------
import os
import sys
path = '/home/maheshproject/jobs_repo/maheshprojects'
if path not in sys.path:
	sys.path.append(path)
os.chdir(path)
os.environ.setdefault('DJANGO_SETTINGS_MODULE','maheshjobs.settings')
import django
django.setup()

-->Relaod application then access.

We will get an error
-----------------------------
DisallowedHost at /
Invalid HTTP_HOST header: 'maheshproject.pythonanywhere.com'. You may need to add 'maheshproject.pythonanywhere.com' to ALLOWED_HOSTS.

in settings.py:
	ALLOWED_HOSTS = ['maheshproject.pythonanywhere.com']

-->Refresh browser.

Add static files:
----------------------
For admin application:
----------------------------------
	URL:/static/admin
	Path:/home/maheshproject/.virtualenvs/myproj/lib/python3.10/site-packages/django/contrib/admin/static/admin

For our application:
-----------------------------
	URL: /static
	Path:/home/maheshproject/jobs_repo/maheshjobs/static

-->Reload application and access app.

		https://maheshproject.pythonanywhere.com/
		
-->https://maheshproject.pythonanywhere.com/admin
			check for tables.

-->goto consoles bash console

$ls
	check for populate.py is availbale or not
$py populate.py
	-->If Faker module is not availbale
$pip install faker
$py populate.py

open URL:https://maheshproject.pythonanywhere.com/admin
				check table data in admin interface.

open URL:
			https://maheshproject.pythonanywhere.com/


Need of Git
Need of Github
Difference between git and github
deployment platform



